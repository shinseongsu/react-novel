type AstNode = {
    type: 'Property';
    name: string;
    children: Exclude<AstNode, {
        type: 'Property' | 'MapItem';
    }>[];
} | {
    type: 'Action';
    name: string;
    children: Extract<AstNode, {
        type: 'JSValue' | 'Value' | 'Map' | 'Array';
    }>[];
} | {
    type: 'JSValue';
    content: string;
} | {
    type: 'Value';
    content: string;
} | {
    type: 'Map';
    children: Extract<AstNode, {
        type: 'MapItem';
    }>[];
} | {
    type: 'MapItem';
    name: string;
    children: Exclude<AstNode, {
        type: 'Property' | 'MapItem';
    }>[];
} | {
    type: 'Array';
    children: Exclude<AstNode, {
        type: 'Property' | 'MapItem';
    }>[];
};
type Ast = Extract<AstNode, {
    type: 'Property';
}>[];
type TransformOptions = {
    rewrites?: Record<string, string>;
    useWith?: boolean;
};
type PrintOptions = object;

declare const parse: (source: string) => Ast;

declare const print: (ast: Ast, {}?: PrintOptions) => string;

declare const transform: (ast: Ast, { rewrites, useWith }?: TransformOptions) => string;

declare const traverse: (ast: Ast | AstNode, cb: (item: AstNode) => void) => void;

export { type Ast, type AstNode, type PrintOptions, type TransformOptions, parse, print, transform, traverse };
