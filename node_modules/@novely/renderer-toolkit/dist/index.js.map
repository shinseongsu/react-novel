{"version":3,"sources":["../src/index.ts","../src/atoms/memo.ts","../src/atoms/deep-atom.ts","../src/state/context-state.ts","../src/state/renderer-state.ts","../src/utils/noop.ts","../src/utils/findLast.ts","../src/utils/escape-html.ts","../src/renderer/start.ts","../src/audio/audio.ts","../src/shared/create-shared.ts","../src/context/create-get-context.ts","../src/root/root-setter.ts","../src/context/vibrate.ts","../src/context/background.ts","../src/context/actions.ts"],"sourcesContent":["export * from 'nanostores'\nexport type * from 'nanostores'\n\nexport { memo } from './atoms/memo'\n\nexport { deepAtom } from './atoms/deep-atom'\nexport type { DeepAtom } from './atoms/deep-atom'\n\nexport { createContextStateRoot } from './state/context-state'\nexport type { ContextStateStore, ContextState, ContextStateCharacter, ContextStateCustomHandler } from './state/context-state'\n\nexport { createRendererState } from './state/renderer-state'\nexport type { RendererState, RendererStateStore } from './state/renderer-state'\n\nexport { noop } from './utils'\n\nexport { createStartFunction } from './renderer/start'\nexport type { StartFunctionMountFn, StartFunctionUnMountFn } from './renderer/start'\n\nexport { createAudio, createAudioMisc } from './audio/audio'\nexport type { AudioStore } from './audio/types'\n\nexport { createShared } from './shared/create-shared'\n\nexport { createGetContext } from './context/create-get-context'\n\nexport { createRootSetter } from './root/root-setter'\n\nexport {\n  handleBackgroundAction,\n  handleDialogAction,\n  handleChoiceAction,\n  handleClearAction,\n  handleCustomAction,\n  handleTextAction,\n  handleInputAction,\n  handleVibrateAction,\n  handleClearBlockingActions\n} from './context/actions'\n","import type { Atom, ReadableAtom } from 'nanostores';\nimport { onMount, atom } from 'nanostores';\nimport { dequal } from 'dequal'\n\nconst memo = <T, K>(input: Atom<T>, cb: (value: T) => K) => {\n  const $memoized = atom<K>(cb(input.get()));\n\n  const unsubscribe = input.subscribe((value) => {\n    const comparable = cb(value);\n\n    if (!dequal($memoized.get(), comparable)) {\n      // @ts-ignore\n      $memoized.set(typeof comparable === 'object' ? { ...comparable } : Array.isArray(comparable) ? [...comparable] : comparable)\n    }\n  })\n\n  onMount($memoized, () => {\n    return unsubscribe;\n  })\n\n  return $memoized as ReadableAtom<K>;\n}\n\nexport { memo }\n","import type { BaseDeepMap, DeepMapStore } from 'nanostores'\nimport { deepMap, setByKey } from 'nanostores'\n\ntype AnyFunction = (...args: any[]) => any;\n\n/**\n * @deprecated\n * @todo remove it\n */\ntype NoInfer<T> = [T][T extends any ? 0 : never];\n\ntype GetPath<$AtomValue extends object, $MutateValue> = (object: $AtomValue) => $MutateValue;\ntype Setter<T> = T extends AnyFunction ? () => T : (T | ((prev: T) => T))\n\ntype DeepAtom<T extends BaseDeepMap> = DeepMapStore<T> & {\n  mutate: <$MutateValue>(getPath: ((object: T) => $MutateValue), setter: Setter<NoInfer<$MutateValue>>) => NoInfer<$MutateValue>;\n}\n\nconst usePath = <$AtomValue extends BaseDeepMap, $MutateValue>(atomValue: $AtomValue, getPath: GetPath<$AtomValue, $MutateValue>) => {\n  const targets = new Set();\n  const path: PropertyKey[] = [];\n\n  let current;\n\n  const proxyHandler: ProxyHandler<any> = {\n    get(target, prop, receiver) {\n      if (targets.has(target)) {\n        /**\n         * Same property was accessed twice\n         */\n        throw new ReferenceError(`Attempted to access property on the same target multiple times.`)\n      }\n\n      const value = Reflect.get(target, prop, receiver);\n\n      targets.add(target);\n      path.push(prop);\n\n      current = value;\n\n      if (value === undefined) {\n        return new Proxy({}, proxyHandler);\n      }\n\n      if (value && typeof value === 'object') {\n        return new Proxy(value, proxyHandler);\n      }\n\n      return value;\n    },\n  }\n\n  getPath(new Proxy(atomValue, proxyHandler));\n\n  if (path.length === 0) {\n    throw new Error('No valid path extracted from the provided getPath function.')\n  }\n\n  return {\n    path,\n    value: current as $MutateValue\n  }\n}\n\n/**\n * Creates a `deepMap` extended with `mutate` method\n *\n * @example\n * ```ts\n * const $user = deepAtom({ age: 16 });\n *\n * $user.mutate((s) => s.age, (age) => age + 1);\n * ```\n */\nconst deepAtom = <$AtomValue extends BaseDeepMap>(init: $AtomValue): DeepAtom<$AtomValue> => {\n  const $atom = deepMap(init) as unknown as DeepAtom<$AtomValue>;\n\n  $atom.mutate = (getPath, setter) => {\n    const { path, value } = usePath($atom.get(), getPath);\n\n    const newValue = typeof setter === 'function' ? setter(value) : setter;\n\n    if (newValue === value) {\n      return newValue;\n    }\n\n    const oldValue = $atom.value;\n\n    // @ts-expect-error Value is actually is not read-only\n    $atom.value = setByKey($atom.value, path, newValue)\n    // @ts-expect-error Type for path is dynamic\n    $atom.notify(oldValue, path.join('.'))\n\n    return newValue;\n  }\n\n  return $atom;\n}\n\nexport { deepAtom }\nexport type { DeepAtom }\n","import type { CustomHandler, CustomHandlerGetResult } from '@novely/core';\nimport type { BaseDeepMap } from 'nanostores';\nimport type { DeepAtom } from '../atoms/deep-atom';\nimport { onMount, cleanStores } from 'nanostores';\nimport { deepAtom } from '../atoms/deep-atom';\n\ntype Disposable = {\n  /**\n   * Function that is called after action is completed and game should move forward\n   *\n   * @example\n   * ```ts\n   * function handleTextActionClick() {\n   *   const { resolve } = contextState.get().text;\n   *\n   *   // as user clicked on text we will hide text by updating this store\n   *   contextState.setKey('text', { content: '' });\n   *\n   *   // now proceed to go to next action\n   *   resolve()\n   * }\n   * ```\n   */\n  resolve?: () => void;\n}\n\ntype WithActionVisibility = {\n  /**\n   * Used to check if something should be rendered\n   */\n  visible: boolean;\n}\n\ntype Labelled = {\n  /**\n   * Label for the action.\n   *\n   * In example for Input action it might be \"Enter youʼ age\", and for Choice action it might be \"Select youʼr next move\"\n   */\n  label: string;\n}\n\ntype ContextStateBackground = {\n  /**\n   * In-game background image\n   */\n  background: string;\n  /**\n   * Function that is NOT provided by core. You can set it yourself.\n   */\n  clear?: () => void;\n}\n\ntype ContextStateCharacter = WithActionVisibility & {\n  /**\n   * Basically `element.style`\n   */\n  style: string | undefined;\n  /**\n   * Character removal can be delayed so it could be removed with animation.\n   *\n   * Storing timeout id is needed to cancel it if in example ShowCharacter was called before time for removal came to the end to prevent character unexpectedly be removed\n   */\n  hideTimeoutId?: ReturnType<typeof setTimeout>;\n}\n\ntype ContextStateCharacters = {\n  [key: string]: ContextStateCharacter | undefined;\n}\n\ntype ContextStateCustomHandler = {\n  /**\n   * Node in which custom action is rendered\n   */\n  node: null | HTMLDivElement;\n  /**\n   * Custom Handler function itself\n   */\n  fn: CustomHandler;\n  /**\n   * Clear Function. Removes the action.\n   */\n  clear: () => void;\n}\n\ntype ContextStateCustomHandlers = {\n  [key: string]: ContextStateCustomHandler | undefined\n}\n\ntype ContextStateText = Disposable & {\n  /**\n   * Text to be rendered\n   */\n  content: string;\n}\n\ntype ContextStateDialog = Disposable & WithActionVisibility & {\n  /**\n   * Character lyrics\n   */\n  content: string;\n  /**\n   * Character lyrics. It might be also empty\n   */\n  name: string;\n  /**\n   * Miniature character rendered along with text\n   */\n  miniature: {\n    /**\n     * Character\n     */\n    character?: string;\n    /**\n     * Character's emotion\n     */\n    emotion?: string;\n  }\n}\n\ntype ContextStateInput = Disposable & WithActionVisibility & Labelled & {\n  /**\n   * Input Element. Input action very dependent on DOM so this is needed\n   */\n  element: null | HTMLInputElement;\n  /**\n   * When input validation failed this error message should be shown near input element.\n   * When error is present, going to next action should be restricted.\n   */\n  error: string;\n  /**\n   * Function that should be called before input action should be removed\n   */\n  cleanup?: () => void;\n}\n\ntype ContextStateChoice = WithActionVisibility & Labelled & {\n  /**\n   * It is an array of choices.\n   *\n   * First item of choice is a choice text and second one is active it or not.\n   * When choice is not action it should be impossible to select that choice.\n   */\n  choices: [string, boolean][];\n  /**\n   * Function that is called after choice was made and game should move forward\n   * @param selected index\n   * @example\n   * ```ts\n   * function handleChoiceActionSelection() {\n   *   const index = document.querySelector('select.choice').selectedIndex;\n   *\n   *   const { resolve } = contextState.get().choice;\n   *\n   *   // pass index\n   *   resolve(index);\n   *\n   *   contextState.setKey('choice', { choices: [] });\n   * }\n   * ```\n   */\n  resolve?: (selected: number) => void;\n}\n\ntype ContextStateMeta = {\n  /**\n   * Is it currently in restoring phase\n   */\n  restoring: boolean\n  /**\n   * Is it in preview mode\n   *\n   * In this mode game should be un-playable\n   */\n  preview: boolean\n  /**\n   * Is Novely in goingBack state\n   */\n  goingBack: boolean\n}\n\n/**\n * State which is related to game contexts and contains data about it\n */\ntype ContextState = {\n  /**\n   * ShowBackground action.\n   */\n  background: ContextStateBackground;\n  /**\n   * Character information.\n   */\n  characters: ContextStateCharacters;\n  /**\n   * Text action. Basically shown over other action\n   */\n  text: ContextStateText;\n  /**\n   * Dialog action.\n   */\n  dialog: ContextStateDialog;\n  /**\n   * Input action.\n   */\n  input: ContextStateInput;\n  /**\n   * Choice action.\n   */\n  choice: ContextStateChoice;\n  /**\n  * Meta information about current context\n  */\n  meta: ContextStateMeta;\n  /**\n   * Custom Action store\n   */\n  custom: ContextStateCustomHandlers;\n}\n\nconst defaultEmpty = {} satisfies BaseDeepMap;\n\ntype ContextStateStore<Extension extends BaseDeepMap = typeof defaultEmpty> = ContextState & Extension\n\nconst getDefaultContextState = (): ContextState => {\n  return {\n    background: {\n      background: '#000',\n    },\n    characters: {},\n    choice: {\n      label: '',\n      visible: false,\n      choices: [],\n    },\n    dialog: {\n      content: '',\n      name: '',\n      visible: false,\n      miniature: {},\n    },\n    input: {\n      element: null,\n      label: '',\n      error: '',\n      visible: false\n    },\n    text: {\n      content: ''\n    },\n    custom: {},\n    meta: {\n      restoring: false,\n      goingBack: false,\n      preview: false\n    }\n  }\n}\n\n/**\n * Creates typed context state root\n *\n * @example\n * ```ts\n * const { useContextState, removeContextState } = createContextStateRoot<{ additionalContextProp: number }>(() => {\n *   return {\n *     additionalContextProp: 123\n *   }\n * });\n *\n * // when you want to create or get context state\n * useContextState('id here')\n *\n * // when context state should be removed\n * removeContextState('id here')\n * ```\n */\nconst createContextStateRoot = <Extension extends BaseDeepMap = typeof defaultEmpty>(getExtension: () => Extension = () => ({}) as Extension) => {\n  const CACHE = new Map<string, DeepAtom<ContextStateStore<Extension>>>();\n\n  const make = () => {\n    const contextState = deepAtom<ContextStateStore<Extension>>({\n      ...getDefaultContextState(),\n      ...getExtension()\n    } as ContextStateStore<Extension>);\n\n    return contextState;\n  }\n\n  const remove = (id: string) => {\n    const contextState = CACHE.get(id);\n\n    if (contextState) {\n      cleanStores(contextState)\n    }\n\n    CACHE.delete(id);\n  }\n\n  const use = (id: string) => {\n    const cached = CACHE.get(id);\n\n    if (cached) {\n      return cached;\n    }\n\n    const contextState = make();\n\n    CACHE.set(id, contextState);\n\n    onMount(contextState, () => {\n      return () => {\n        CACHE.delete(id);\n      }\n    })\n\n    return contextState;\n  }\n\n  return {\n    useContextState: use,\n    removeContextState: remove\n  }\n}\n\nexport { createContextStateRoot }\nexport type {\n  ContextStateStore,\n  ContextState,\n  ContextStateCharacter,\n  ContextStateCustomHandler\n}\n","import type { NovelyScreen } from '@novely/core';\nimport type { BaseDeepMap } from 'nanostores';\nimport { deepAtom } from '../atoms/deep-atom';\n\n/**\n * State which is related to whole renderer\n */\ntype RendererState = {\n  /**\n   * Current screen that should be rendered\n   */\n  screen: NovelyScreen;\n  /**\n   * Is loading shown. Unlike screen 'loading', it does not change screen and shown above all layers\n   */\n  loadingShown: boolean;\n  /**\n   * Is exit prompt should be shown\n   */\n  exitPromptShown: boolean;\n}\n\nconst defaultEmpty = {} satisfies BaseDeepMap;\n\ntype RendererStateStore<Extension extends BaseDeepMap = typeof defaultEmpty> = RendererState & Extension;\n\n/**\n * Helper to make renderer state with default recommended values\n * @param extension Additional object to be merged with default values\n * @returns Store\n * @example\n * ```ts\n * createRenderer(() => {\n *   const rendererState = createRendererState();\n *\n *   return {\n *     ui: {\n *       showScreen(name) {\n *         rendererState.setKey('screen', name)\n *       },\n *       getScreen() {\n *         return rendererState.get().screen;\n *       }\n *     }\n *   }\n * })\n * ```\n */\nconst createRendererState = <Extension extends BaseDeepMap = typeof defaultEmpty>(extension = defaultEmpty as Extension) => {\n  const rendererState = deepAtom<RendererStateStore<Extension>>({\n    screen: 'mainmenu',\n    loadingShown: false,\n    exitPromptShown: false,\n    ...extension\n  } as RendererStateStore<Extension>)\n\n  return rendererState;\n}\n\nexport { createRendererState }\nexport type { RendererState, RendererStateStore }\n","const noop = () => {};\n\nexport { noop }\n","const findLastIndex = <T>(array: T[], fn: (this: T[], item: T, index: number, array: T[]) => boolean) => {\n\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\tif (fn.call(array, array[i], i, array)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n};\n\n/**\n * Using this because `Array.prototype.findLast` has not enough support\n * @see https://caniuse.com/?search=findLast\n */\nconst findLast = <T>(array: T[], fn: (this: T[], item: T, index: number, array: T[]) => boolean) => {\n\treturn array[findLastIndex(array, fn)];\n}\n\nexport { findLastIndex, findLast }\n","const escaped: Record<string, string> = {\n\t'\"': '&quot;',\n\t\"'\": '&#39;',\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n};\n\nconst escapeHTML = (str: string) => {\n\treturn String(str).replace(/[\"'&<>]/g, (match) => escaped[match]);\n};\n\nexport { escapeHTML }\n","import { noop } from \"../utils\";\n\n/**\n * Unmounts app\n *\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * root.render(<App />);\n *\n * // this is we want\n * root.unmount();\n * ```\n */\ntype StartFunctionUnMountFn = () => void;\n\n/**\n * Mounts app, returns unmount function\n *\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * function start() {\n *   root.render(<App />);\n *\n *   return () => {\n *     root.unmount();\n *   }\n * }\n * ```\n */\ntype StartFunctionMountFn = () => StartFunctionUnMountFn;\n\n/**\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * createStartFunction(() => {\n *   root.render(<App />);\n *\n *   return () => {\n *     root.unmount();\n *   }\n * })\n * ```\n */\nconst createStartFunction = (fn: StartFunctionMountFn) => {\n  let unmount: StartFunctionUnMountFn = noop;\n\n  return () => {\n    unmount();\n    unmount = fn();\n\n    return {\n      unmount: () => {\n        unmount();\n        unmount = noop;\n      }\n    }\n  }\n}\n\nexport { createStartFunction }\nexport type { StartFunctionMountFn, StartFunctionUnMountFn }\n","import type { AudioStore } from './types';\nimport type { AudioHandle, Context, Stored, StorageData, Data, Renderer } from '@novely/core';\nimport { createAudio as createWebAudio, prefetchAudio } from 'simple-web-audio';\nimport { noop } from '../utils';\n\ntype AudioContext = Context['audio'];\ntype AudioMisc = Pick<Renderer['misc'], 'preloadAudioBlocking'>;\ntype StorageDataStore = Stored<StorageData<string, Data>>;\n\ntype KeepAudio = {\n  music: Set<string>;\n  sounds: Set<string>;\n}\n\nconst TYPE_META_MAP = {\n  'music': 2,\n  'sound': 3,\n  'voice': 4\n} as const;\n\n/**\n * Audio easy! This implementation uses `simple-web-audio` package under the hood.\n *\n * @example\n * ```ts\n * const audio = createAudio(options.storageData);\n * ```\n */\nconst createAudio = (storageData: StorageDataStore) => {\n  const store: AudioStore = {\n    music: {},\n    sound: {},\n    voices: {},\n  }\n\n  const getVolume = (type: 'music' | 'sound' | 'voice') => {\n    return storageData.get().meta[TYPE_META_MAP[type]];\n  }\n\n  const getAudio = (type: 'music' | 'sound' | 'voice', src: string) => {\n    const kind = type === 'voice' ? 'voices' : type;\n    const cached = store[kind][src];\n\n    if (cached) return cached;\n\n    const audio = createWebAudio({\n      src,\n      volume: getVolume(type),\n      pauseOnBlur: true\n    })\n\n    store[kind][src] = audio;\n\n    return audio;\n  }\n\n  let unsubscribe = noop;\n\n  const context: AudioContext = {\n    music(src, method) {\n      const resource = getAudio(method, src);\n\n      this.start();\n\n      return {\n        pause() {\n          resource.pause();\n        },\n        play(loop) {\n          resource.loop = loop;\n          resource.play();\n        },\n        stop() {\n          resource.stop();\n        },\n      } satisfies AudioHandle;\n    },\n    voice(source) {\n      this.start();\n      this.voiceStop();\n\n      const resource = store.voice = getAudio('voice', source);\n\n      resource.play();\n    },\n    voiceStop() {\n      if (!store.voice) return;\n\n      store.voice.stop();\n      store.voice = undefined;\n    },\n    start() {\n      if (unsubscribe !== noop) return;\n\n      /**\n       * Subscribe for volume changes in settings\n       */\n      unsubscribe = storageData.subscribe(() => {\n        for (const type of ['music', 'sound', 'voice'] as const) {\n          const volume = getVolume(type);\n\n          if (type === 'music' || type === 'sound') {\n            for (const audio of Object.values(store[type])) {\n              if (!audio) continue;\n\n              audio.volume = volume;\n            }\n          }\n\n          if (type === 'voice' && store.voice) {\n            store.voice.volume = volume;\n          }\n        }\n      });\n    },\n    clear() {\n      const musics = Object.values(store.music);\n      const sounds = Object.values(store.sound);\n\n      for (const music of [...musics, ...sounds]) {\n        // todo: при переходе в настройки для музыки не делать бы stop, а делать pause\n        music?.stop()\n      }\n\n      this.voiceStop();\n    },\n    destroy() {\n      unsubscribe();\n      this.clear();\n\n      unsubscribe = noop;\n    }\n  };\n\n  /**\n   * Used in clear action when audio should be cleared\n   * @param keepAudio Passed from Clear Action\n   */\n  const clear = (keepAudio: KeepAudio) => {\n    context.voiceStop();\n\n    const musics = Object.entries(store.music).filter(([name]) => !keepAudio.music.has(name)).map(([_, a]) => a);\n    const sounds = Object.entries(store.sound).filter(([name]) => !keepAudio.sounds.has(name)).map(([_, a]) => a);\n\n    for (const music of [...musics, ...sounds]) {\n      if (!music) continue;\n\n      music.stop()\n    }\n  }\n\n  return {\n    context,\n\n    clear,\n\n    getVolume,\n    getAudio\n  }\n}\n\nconst createAudioMisc = () => {\n  const misc: AudioMisc = {\n    preloadAudioBlocking: async (src) => {\n      await prefetchAudio(src);\n    }\n  };\n\n  return misc;\n}\n\nexport { createAudioMisc, createAudio }\n","/**\n * Creates a map of mutable objects\n *\n * todo: practical usage\n *\n * @example\n * ```ts\n * const { useShared, removeShared } = createShared<{ count: number }>(() => {\n *   return {\n *     count: 0\n *   }\n * })\n *\n * useShared('HELLO').count += 1\n * console.log(useShared('HELLO').count) // prints 1\n *\n * useShared('WORLD').count += 1\n * console.log(useShared('WORLD').count) // prints 1 too\n * ```\n */\nconst createShared = <T extends Record<PropertyKey, unknown>>(get: () => T) => {\n  const CACHE = new Map<string, T>();\n\n  const use = (id: string) => {\n    const cached = CACHE.get(id);\n\n    if (cached) {\n      return cached\n    }\n\n    const shared = get();\n\n    CACHE.set(id, shared);\n\n    return shared;\n  }\n\n  const remove = (id: string) => {\n    CACHE.delete(id);\n  }\n\n  return {\n    useShared: use,\n    removeShared: remove\n  }\n}\n\nexport { createShared }\n","import type { Context } from \"@novely/core\"\n\n/**\n * Creates utilities to manage context's in renderer\n * @example\n * ```ts\n * function renderer(options: RendererInit) {\n *   const { getContextCached, removeContext } = createGetContext();\n *\n *   return {\n *     getContext: getContextCached((key) => {\n *       // return Context\n *       return {}\n *     }),\n *     removeContext: (key) => {\n *       removeContext(key);\n *     }\n *   }\n * }\n * ```\n */\nconst createGetContext = () => {\n  const CACHE = new Map<string, Context>();\n\n  /**\n   * Creates context on call, but if context was already created, returns already created context\n   * @param createContext Function to create context\n   * @example\n   * ```ts\n   * function renderer(options: RendererInit) {\n   *   return {\n   *     getContext: getContextCached((key) => {\n   *       // return Context\n   *       return {}\n   *     }),\n   *     removeContext: (key) => {\n   *       removeContext(key);\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  const getContextCached = (createContext: (key: string) => Context) => {\n    return (key: string) => {\n      const cached = CACHE.get(key);\n\n      if (cached) {\n        return cached;\n      }\n\n      const context = createContext(key);\n\n      CACHE.set(key, context)\n\n      return context;\n    }\n  }\n\n  /**\n   * Removed context\n   * @param key Context's key\n   * @example\n   * ```ts\n   * function renderer(options: RendererInit) {\n   *   return {\n   *     getContext: getContextCached((key) => {\n   *       // return Context\n   *       return {}\n   *     }),\n   *     removeContext: (key) => {\n   *       // remove context\n   *       removeContext(key);\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  const removeContext = (key: string) => {\n    CACHE.delete(key)\n  }\n\n  return {\n    getContextCached,\n    removeContext\n  }\n}\n\nexport { createGetContext }\n","import type { Context } from \"@novely/core\"\n\n/**\n * Simply set root to the context\n * @param getContext Function that returns main context\n * @example\n * ```ts\n * const { root, setRoot } = createRootSetter(() => renderer.getContext(options.mainContextKey));\n *\n * const renderer = {\n *   getContext: getContextCached((key) => {\n *     return {\n *       root: root()\n *     }\n *   }),\n *   ui: {\n *     start: createStartFunction(() => {\n *       // this is just an example, use your library to get the node\n *       const element = document.createElement('div');\n *\n *       document.body.appendChild(element);\n *\n *       setRoot(element);\n *\n *       return () => {\n *         element.remove();\n *       }\n *     })\n *   }\n * }\n * ```\n */\nconst createRootSetter = (getContext: () => Context) => {\n  let element: HTMLElement;\n\n  return {\n    root() {\n      return element\n    },\n    setRoot(root: HTMLElement) {\n      element = root;\n\n      const context = getContext();\n\n      /**\n       * Update directly if root was not set already\n       */\n      if (!context.root) {\n        context.root = root;\n      }\n    }\n  }\n}\n\nexport { createRootSetter }\n","const vibrationPossible = /* @__PURE__ */ (() => {\n\tlet possible = false;\n\n\tconst onPointerDown = () => {\n\t\tpossible = true;\n\t};\n\n\tconst isPossible = () => {\n\t\treturn possible;\n\t};\n\n\tdocument.addEventListener('pointerdown', onPointerDown, { once: true });\n\n\treturn isPossible;\n})();\n\n/**\n * Vibrate for browser environment\n */\nconst vibrate = (pattern: VibratePattern) => {\n\tif (vibrationPossible() && 'vibrate' in navigator) {\n\t\ttry {\n\t\t\tnavigator.vibrate(pattern);\n\t\t} catch {}\n\t}\n}\n\nexport { vibrate }\n","import { findLast } from \"../utils\";\n\nconst useBackground = (backgrounds: Record<string, string>, set: (bg: string) => void) => {\n\tconst mediaQueries = Object.keys(backgrounds).map((media) => matchMedia(media));\n\tconst allMedia = mediaQueries.find(({ media }) => media === 'all');\n\n\tconst handle = () => {\n\t\tconst last = findLast(mediaQueries, ({ matches, media }) => matches && media !== 'all');\n\t\tconst bg = last\n\t\t\t? backgrounds[last.media]\n\t\t\t: allMedia\n\t\t\t\t? backgrounds['all']\n\t\t\t\t: '';\n\n\t\tset(bg);\n\t};\n\n\tfor (const mq of mediaQueries) {\n\t\tmq.onchange = handle;\n\t}\n\n\tlet disposed = false;\n\n\t/**\n\t * In case this will be immideately disposed `handle` call is put in Promise\n\t */\n\tPromise.resolve().then(() => {\n\t\tif (disposed) return;\n\n\t\thandle();\n\t})\n\n\treturn {\n\t\t/**\n\t\t * Remove all listeners\n\t\t */\n\t\tdispose() {\n\t\t\tfor (const mq of mediaQueries) {\n\t\t\t\tmq.onchange = null;\n\t\t\t}\n\n\t\t\tdisposed = true;\n\t\t}\n\t}\n}\n\nexport { useBackground }\n","import type {\n  BackgroundImage,\n  Context,\n  DefaultActionProxy,\n  RendererInit,\n  CustomHandler,\n  State,\n  ActionInputOnInputMeta,\n\tActionInputSetup,\n  CustomActionHandle\n} from '@novely/core'\nimport type { ContextState, ContextStateStore } from '../state/context-state'\nimport type { RendererStateStore } from '../state/renderer-state'\nimport type { DeepAtom } from '../atoms/deep-atom'\n\nimport { vibrate } from './vibrate'\nimport { useBackground } from './background'\nimport { escapeHTML, noop } from '../utils'\n\nconst allEmpty = (target: object | string | number | null | undefined) => {\n  if (typeof target === 'string') {\n    return target == '';\n  }\n\n  if (typeof target === 'number') {\n    return target == 0;\n  }\n\n  if (!target) {\n    return true;\n  }\n\n  if (Array.isArray(target) && target.length > 0) {\n    for (const inner of target) {\n      if (!allEmpty(inner)) {\n        return false;\n      }\n    }\n  }\n\n  for (const value of Object.values(target)) {\n    if (!allEmpty(value)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst handleBackgroundAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, background: Record<string, string>) => {\n  $contextState.get().background.clear?.();\n\n  const { dispose } = useBackground(background, (value) => {\n    $contextState.mutate((s) => s.background, (prev) => {\n      return {\n        ...prev,\n        background: value\n      }\n    });\n  });\n\n  $contextState.mutate((s) => s.background.clear!, () => dispose);\n}\n\nconst handleDialogAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, content: string, name: string, character: string | undefined, emotion: string | undefined, resolve: () => void) => {\n  $contextState.mutate(\n    (s) => s.dialog,\n    {\n      content,\n      name,\n      miniature: {\n        character,\n        emotion,\n      },\n      visible: true,\n      resolve,\n    }\n  );\n}\n\nconst handleChoiceAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, label: string, choices: [name: string, active: boolean][], resolve: (selected: number) => void) => {\n  $contextState.mutate(\n    (s) => s.choice,\n    { choices, label, resolve, visible: true }\n  );\n}\n\nconst handleClearAction = ($rendererState: DeepAtom<RendererStateStore<Record<PropertyKey, unknown>>>, $contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, options: RendererInit<any, any>, context: Context, keep: Set<keyof DefaultActionProxy>, keepCharacters: Set<string>) => {\n  $rendererState.mutate((s) => s.exitPromptShown, false);\n\n  if (!keep.has('showBackground')) {\n    $contextState.mutate((s) => s.background.background, '#000');\n  }\n\n  if (!keep.has('choice')) {\n    $contextState.mutate(\n      (s) => s.choice,\n      {\n        choices: [],\n        visible: false,\n        label: '',\n      }\n    );\n  }\n\n  const inputCleanup = $contextState.get().input.cleanup;\n\n  if (inputCleanup) {\n    inputCleanup();\n  }\n\n  if (!keep.has('input')) {\n    $contextState.mutate(\n      (s) => s.input,\n      {\n        element: null,\n        label: '',\n        visible: false,\n        error: '',\n      }\n    );\n  }\n\n  if (!keep.has('dialog')) {\n    $contextState.mutate(\n      (s) => s.dialog,\n      {\n        visible: false,\n        content: '',\n        name: '',\n        miniature: {}\n      }\n    );\n  }\n\n  if (!keep.has('text')) {\n    $contextState.mutate((s) => s.text, { content: '' });\n  }\n\n  const { characters, custom } = $contextState.get() as ContextState;\n\n  for (const character of Object.keys(characters)) {\n    if (!keepCharacters.has(character)) {\n      $contextState.mutate(\n        (s) => s.characters[character],\n        {\n          style: undefined,\n          visible: false\n        }\n      );\n    }\n  }\n\n  for (const [id, obj] of Object.entries(custom)) {\n    if (!obj) continue;\n    if (context.meta.goingBack && obj.fn.skipClearOnGoingBack) continue;\n\n    options.clearCustomAction(context, obj.fn);\n    $contextState.mutate((s) => s.custom[id], undefined);\n  }\n}\n\n/**\n * You must return value returned by this function\n */\nconst handleCustomAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, fn: CustomHandler<string, State>): CustomActionHandle => {\n  if (!$contextState.get().custom[fn.key]) {\n    $contextState.mutate(\n      (s) => s.custom[fn.key],\n      {\n        fn,\n        node: null,\n        clear: noop,\n      }\n    )\n  }\n\n  return {\n    setMountElement(node) {\n      $contextState.mutate(\n        (s) => s.custom[fn.key]!,\n        (state) => {\n          return {\n            ...state,\n            node\n          }\n        }\n      )\n    },\n    setClear(clear) {\n      $contextState.mutate(\n        (s) => s.custom[fn.key]!,\n        (state) => {\n          return {\n            ...state,\n            clear\n          }\n        }\n      )\n    },\n    remove() {\n      $contextState.mutate((s) => s.custom[fn.key], undefined);\n    }\n  }\n}\n\nconst handleClearBlockingActions = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, preserve?: \"choice\" | \"dialog\" | \"input\" | \"text\" | undefined) => {\n  const current = $contextState.get()\n\n  if (preserve !== 'choice' && !allEmpty(current.choice)) {\n    $contextState.mutate(\n      (s) => s.choice,\n      {\n        choices: [],\n        visible: false,\n        label: '',\n      }\n    );\n  }\n\n  if (preserve !== 'input' && !allEmpty(current.input)) {\n    $contextState.mutate(\n      (s) => s.input,\n      {\n        element: null,\n        label: '',\n        visible: false,\n        error: '',\n      }\n    );\n  }\n\n  if (preserve !== 'text' && !allEmpty(current.text)) {\n    $contextState.mutate((s) => s.text, { content: '' });\n  }\n\n  if (preserve !== 'dialog' && !allEmpty(current.dialog)) {\n    $contextState.mutate(\n      (s) => s.dialog,\n      {\n        visible: false,\n        content: '',\n        name: '',\n        miniature: {}\n      }\n    );\n  }\n}\n\nconst handleTextAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, content: string, resolve: () => void) => {\n  $contextState.mutate((s) => s.text, { content, resolve });\n}\n\nconst handleInputAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, options: RendererInit<any, any>, context: Context, label: string, onInput: (opts: ActionInputOnInputMeta<string, State>) => void, setup: ActionInputSetup, resolve: () => void) => {\n  const error = (value: string) => {\n    $contextState.mutate((s) => s.input.error, value);\n  };\n\n  const onInputHandler = (event: InputEvent & { currentTarget: HTMLInputElement }) => {\n    let value: string | undefined;\n\n    onInput({\n      lang: options.storageData.get().meta[0],\n      input,\n      event,\n      error,\n      state: options.getStateFunction(context.id),\n      get value() {\n        if (value) return value;\n        return (value = escapeHTML(input.value));\n      },\n    });\n  };\n\n  const input = document.createElement('input');\n\n  input.setAttribute('type', 'text')\n  input.setAttribute('name', 'novely-input')\n  input.setAttribute('required', 'true')\n  input.setAttribute('autocomplete', 'off')\n\n  // @ts-expect-error Type is actually correct\n  !context.meta.preview && input.addEventListener('input', onInputHandler);\n\n  $contextState.mutate(\n    (s) => s.input,\n    {\n      element: input,\n      label,\n      error: '',\n      visible: true,\n      cleanup: setup(input) || noop,\n      resolve,\n    }\n  );\n\n  /**\n   * Initially run the fake input event to handle errors & etc\n   */\n  !context.meta.preview && input.dispatchEvent(new InputEvent('input', { bubbles: true }));\n}\n\n\nconst handleVibrateAction = vibrate;\n\nexport {\n  handleBackgroundAction,\n  handleDialogAction,\n  handleChoiceAction,\n  handleClearAction,\n  handleCustomAction,\n  handleClearBlockingActions,\n  handleTextAction,\n  handleInputAction,\n  handleVibrateAction\n}\n"],"mappings":"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","names":["onMount","onMount"]}