{"version":3,"sources":["../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/task/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/clean-stores/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/atom/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/lifecycle/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/computed/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/deep-map/path.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/deep-map/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/keep-mount/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/listen-keys/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/map/index.js","../../../node_modules/.pnpm/nanostores@0.10.3/node_modules/nanostores/map-creator/index.js","../../../node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../src/atoms/memo.ts","../src/atoms/deep-atom.ts","../src/state/context-state.ts","../src/state/renderer-state.ts","../src/utils/noop.ts","../src/utils/findLast.ts","../src/utils/escape-html.ts","../src/renderer/start.ts","../../../node_modules/.pnpm/yocto-queue@1.1.1/node_modules/yocto-queue/index.js","../../../node_modules/.pnpm/p-limit@6.1.0/node_modules/p-limit/index.js","../../../node_modules/.pnpm/simple-web-audio@0.7.0_postcss@8.4.32/node_modules/simple-web-audio/src/wait_for_interaction.ts","../../../node_modules/.pnpm/simple-web-audio@0.7.0_postcss@8.4.32/node_modules/simple-web-audio/src/browser-events.ts","../../../node_modules/.pnpm/simple-web-audio@0.7.0_postcss@8.4.32/node_modules/simple-web-audio/src/queue.ts","../../../node_modules/.pnpm/simple-web-audio@0.7.0_postcss@8.4.32/node_modules/simple-web-audio/src/memo.ts","../../../node_modules/.pnpm/simple-web-audio@0.7.0_postcss@8.4.32/node_modules/simple-web-audio/src/audio.ts","../src/audio/audio.ts","../src/shared/create-shared.ts","../src/context/create-get-context.ts","../src/root/root-setter.ts","../src/context/vibrate.ts","../src/context/background.ts","../src/context/actions.ts"],"sourcesContent":["let tasks = 0\nlet resolves = []\n\nexport function startTask() {\n  tasks += 1\n  return () => {\n    tasks -= 1\n    if (tasks === 0) {\n      let prevResolves = resolves\n      resolves = []\n      for (let i of prevResolves) i()\n    }\n  }\n}\n\nexport function task(cb) {\n  let endTask = startTask()\n  let promise = cb().finally(endTask)\n  promise.t = true\n  return promise\n}\n\nexport function allTasks() {\n  if (tasks === 0) {\n    return Promise.resolve()\n  } else {\n    return new Promise(resolve => {\n      resolves.push(resolve)\n    })\n  }\n}\n\nexport function cleanTasks() {\n  tasks = 0\n}\n","import { cleanTasks } from '../task/index.js'\n\nexport let clean = Symbol('clean')\n\nexport let cleanStores = (...stores) => {\n  if (process.env.NODE_ENV === 'production') {\n    throw new Error(\n      'cleanStores() can be used only during development or tests'\n    )\n  }\n  cleanTasks()\n  for (let $store of stores) {\n    if ($store) {\n      if ($store.mocked) delete $store.mocked\n      if ($store[clean]) $store[clean]()\n    }\n  }\n}\n","import { clean } from '../clean-stores/index.js'\n\nlet listenerQueue = []\n\nexport let atom = (initialValue, level) => {\n  let listeners = []\n  let $atom = {\n    get() {\n      if (!$atom.lc) {\n        $atom.listen(() => {})()\n      }\n      return $atom.value\n    },\n    l: level || 0,\n    lc: 0,\n    listen(listener, listenerLevel) {\n      $atom.lc = listeners.push(listener, listenerLevel || $atom.l) / 2\n\n      return () => {\n        let index = listeners.indexOf(listener)\n        if (~index) {\n          listeners.splice(index, 2)\n          if (!--$atom.lc) $atom.off()\n        }\n      }\n    },\n    notify(oldValue, changedKey) {\n      let runListenerQueue = !listenerQueue.length\n      for (let i = 0; i < listeners.length; i += 2) {\n        listenerQueue.push(\n          listeners[i],\n          listeners[i + 1],\n          $atom.value,\n          oldValue,\n          changedKey\n        )\n      }\n\n      if (runListenerQueue) {\n        for (let i = 0; i < listenerQueue.length; i += 5) {\n          let skip\n          for (let j = i + 1; !skip && (j += 5) < listenerQueue.length; ) {\n            if (listenerQueue[j] < listenerQueue[i + 1]) {\n              skip = listenerQueue.push(\n                listenerQueue[i],\n                listenerQueue[i + 1],\n                listenerQueue[i + 2],\n                listenerQueue[i + 3],\n                listenerQueue[i + 4]\n              )\n            }\n          }\n\n          if (!skip) {\n            listenerQueue[i](\n              listenerQueue[i + 2],\n              listenerQueue[i + 3],\n              listenerQueue[i + 4]\n            )\n          }\n        }\n        listenerQueue.length = 0\n      }\n    },\n    /* It will be called on last listener unsubscribing.\n       We will redefine it in onMount and onStop. */\n    off() {},\n    set(newValue) {\n      let oldValue = $atom.value\n      if (oldValue !== newValue) {\n        $atom.value = newValue\n        $atom.notify(oldValue)\n      }\n    },\n    subscribe(listener, listenerLevel) {\n      let unbind = $atom.listen(listener, listenerLevel)\n      listener($atom.value)\n      return unbind\n    },\n    value: initialValue\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    $atom[clean] = () => {\n      listeners = []\n      $atom.lc = 0\n      $atom.off()\n    }\n  }\n\n  return $atom\n}\n","import { clean } from '../clean-stores/index.js'\n\nconst START = 0\nconst STOP = 1\nconst SET = 2\nconst NOTIFY = 3\nconst MOUNT = 5\nconst UNMOUNT = 6\nconst REVERT_MUTATION = 10\n\nexport let on = (object, listener, eventKey, mutateStore) => {\n  object.events = object.events || {}\n  if (!object.events[eventKey + REVERT_MUTATION]) {\n    object.events[eventKey + REVERT_MUTATION] = mutateStore(eventProps => {\n      // eslint-disable-next-line no-sequences\n      object.events[eventKey].reduceRight((event, l) => (l(event), event), {\n        shared: {},\n        ...eventProps\n      })\n    })\n  }\n  object.events[eventKey] = object.events[eventKey] || []\n  object.events[eventKey].push(listener)\n  return () => {\n    let currentListeners = object.events[eventKey]\n    let index = currentListeners.indexOf(listener)\n    currentListeners.splice(index, 1)\n    if (!currentListeners.length) {\n      delete object.events[eventKey]\n      object.events[eventKey + REVERT_MUTATION]()\n      delete object.events[eventKey + REVERT_MUTATION]\n    }\n  }\n}\n\nexport let onStart = ($store, listener) =>\n  on($store, listener, START, runListeners => {\n    let originListen = $store.listen\n    $store.listen = arg => {\n      if (!$store.lc && !$store.starting) {\n        $store.starting = true\n        runListeners()\n        delete $store.starting\n      }\n      return originListen(arg)\n    }\n    return () => {\n      $store.listen = originListen\n    }\n  })\n\nexport let onStop = ($store, listener) =>\n  on($store, listener, STOP, runListeners => {\n    let originOff = $store.off\n    $store.off = () => {\n      runListeners()\n      originOff()\n    }\n    return () => {\n      $store.off = originOff\n    }\n  })\n\nexport let onSet = ($store, listener) =>\n  on($store, listener, SET, runListeners => {\n    let originSet = $store.set\n    let originSetKey = $store.setKey\n    if ($store.setKey) {\n      $store.setKey = (changed, changedValue) => {\n        let isAborted\n        let abort = () => {\n          isAborted = true\n        }\n\n        runListeners({\n          abort,\n          changed,\n          newValue: { ...$store.value, [changed]: changedValue }\n        })\n        if (!isAborted) return originSetKey(changed, changedValue)\n      }\n    }\n    $store.set = newValue => {\n      let isAborted\n      let abort = () => {\n        isAborted = true\n      }\n\n      runListeners({ abort, newValue })\n      if (!isAborted) return originSet(newValue)\n    }\n    return () => {\n      $store.set = originSet\n      $store.setKey = originSetKey\n    }\n  })\n\nexport let onNotify = ($store, listener) =>\n  on($store, listener, NOTIFY, runListeners => {\n    let originNotify = $store.notify\n    $store.notify = (oldValue, changed) => {\n      let isAborted\n      let abort = () => {\n        isAborted = true\n      }\n\n      runListeners({ abort, changed, oldValue })\n      if (!isAborted) return originNotify(oldValue, changed)\n    }\n    return () => {\n      $store.notify = originNotify\n    }\n  })\n\nexport let STORE_UNMOUNT_DELAY = 1000\n\nexport let onMount = ($store, initialize) => {\n  let listener = payload => {\n    let destroy = initialize(payload)\n    if (destroy) $store.events[UNMOUNT].push(destroy)\n  }\n  return on($store, listener, MOUNT, runListeners => {\n    let originListen = $store.listen\n    $store.listen = (...args) => {\n      if (!$store.lc && !$store.active) {\n        $store.active = true\n        runListeners()\n      }\n      return originListen(...args)\n    }\n\n    let originOff = $store.off\n    $store.events[UNMOUNT] = []\n    $store.off = () => {\n      originOff()\n      setTimeout(() => {\n        if ($store.active && !$store.lc) {\n          $store.active = false\n          for (let destroy of $store.events[UNMOUNT]) destroy()\n          $store.events[UNMOUNT] = []\n        }\n      }, STORE_UNMOUNT_DELAY)\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      let originClean = $store[clean]\n      $store[clean] = () => {\n        for (let destroy of $store.events[UNMOUNT]) destroy()\n        $store.events[UNMOUNT] = []\n        $store.active = false\n        originClean()\n      }\n    }\n\n    return () => {\n      $store.listen = originListen\n      $store.off = originOff\n    }\n  })\n}\n","import { atom } from '../atom/index.js'\nimport { onMount } from '../lifecycle/index.js'\n\nlet computedStore = (stores, cb, batched) => {\n  if (!Array.isArray(stores)) stores = [stores]\n\n  let previousArgs\n  let currentRunId = 0\n  let set = () => {\n    let args = stores.map($store => $store.get())\n    if (\n      previousArgs === undefined ||\n      args.some((arg, i) => arg !== previousArgs[i])\n    ) {\n      let runId = ++currentRunId\n      previousArgs = args\n      let value = cb(...args)\n      if (value && value.then && value.t) {\n        value.then(asyncValue => {\n          if (runId === currentRunId) {\n            // Prevent a stale set\n            $computed.set(asyncValue)\n          }\n        })\n      } else {\n        $computed.set(value)\n      }\n    }\n  }\n  let $computed = atom(undefined, Math.max(...stores.map($s => $s.l)) + 1)\n\n  let timer\n  let run = batched\n    ? () => {\n        clearTimeout(timer)\n        timer = setTimeout(set)\n      }\n    : set\n\n  onMount($computed, () => {\n    let unbinds = stores.map($store => $store.listen(run, -1 / $computed.l))\n    set()\n    return () => {\n      for (let unbind of unbinds) unbind()\n    }\n  })\n\n  return $computed\n}\n\nexport let computed = (stores, fn) => computedStore(stores, fn)\nexport let batched = (stores, fn) => computedStore(stores, fn, true)\n","export function getPath(obj, path) {\n  let allKeys = getAllKeysFromPath(path)\n  let res = obj\n  for (let key of allKeys) {\n    if (res === undefined) {\n      break\n    }\n    res = res[key]\n  }\n  return res\n}\n\nexport function setPath(obj, path, value) {\n  return setByKey(obj != null ? obj : {}, getAllKeysFromPath(path), value)\n}\n\nfunction setByKey(obj, splittedKeys, value) {\n  let key = splittedKeys[0]\n  ensureKey(obj, key, splittedKeys[1])\n  let copy = Array.isArray(obj) ? [...obj] : { ...obj }\n  if (splittedKeys.length === 1) {\n    if (value === undefined) {\n      if (Array.isArray(obj)) {\n        copy.splice(key, 1)\n      } else {\n        delete copy[key]\n      }\n    } else {\n      copy[key] = value\n    }\n    return copy\n  }\n  let newVal = setByKey(obj[key], splittedKeys.slice(1), value)\n  obj[key] = newVal\n  return obj\n}\n\nconst ARRAY_INDEX = /(.*)\\[(\\d+)\\]/\n\nfunction getAllKeysFromPath(path) {\n  return path.split('.').flatMap(key => getKeyAndIndicesFromKey(key))\n}\n\nfunction getKeyAndIndicesFromKey(key) {\n  if (ARRAY_INDEX.test(key)) {\n    let [, keyPart, index] = key.match(ARRAY_INDEX)\n    return [...getKeyAndIndicesFromKey(keyPart), index]\n  }\n  return [key]\n}\n\nconst IS_NUMBER = /^\\d+$/\nfunction ensureKey(obj, key, nextKey) {\n  if (key in obj) {\n    return\n  }\n\n  let isNum = IS_NUMBER.test(nextKey)\n\n  if (isNum) {\n    obj[key] = Array(parseInt(nextKey, 10) + 1).fill(undefined)\n  } else {\n    obj[key] = {}\n  }\n}\n","import { atom } from '../atom/index.js'\nimport { getPath, setPath } from './path.js'\n\nexport { getPath, setPath } from './path.js'\n\nexport function deepMap(initial = {}) {\n  let $deepMap = atom(initial)\n  $deepMap.setKey = (key, value) => {\n    let oldValue\n    try {\n      oldValue = structuredClone($deepMap.value)\n    } catch {\n      oldValue = { ...$deepMap.value }\n    }\n    if (getPath($deepMap.value, key) !== value) {\n      $deepMap.value = { ...setPath($deepMap.value, key, value) }\n      $deepMap.notify(oldValue, key)\n    }\n  }\n  return $deepMap\n}\n","export let keepMount = $store => {\n  $store.listen(() => {})\n}\n","export function listenKeys($store, keys, listener) {\n  let keysSet = new Set([...keys, undefined])\n  return $store.listen((value, oldValue, changed) => {\n    if (keysSet.has(changed)) {\n      listener(value, oldValue, changed)\n    }\n  })\n}\n","import { atom } from '../atom/index.js'\n\nexport let map = (initial = {}) => {\n  let $map = atom(initial)\n\n  $map.setKey = function (key, value) {\n    let oldMap = $map.value\n    if (typeof value === 'undefined' && key in $map.value) {\n      $map.value = { ...$map.value }\n      delete $map.value[key]\n      $map.notify(oldMap, key)\n    } else if ($map.value[key] !== value) {\n      $map.value = {\n        ...$map.value,\n        [key]: value\n      }\n      $map.notify(oldMap, key)\n    }\n  }\n\n  return $map\n}\n","import { clean } from '../clean-stores/index.js'\nimport { onMount } from '../lifecycle/index.js'\nimport { map } from '../map/index.js'\n\nexport function mapCreator(init) {\n  let Creator = (id, ...args) => {\n    if (!Creator.cache[id]) {\n      Creator.cache[id] = Creator.build(id, ...args)\n    }\n    return Creator.cache[id]\n  }\n\n  Creator.build = (id, ...args) => {\n    let store = map({ id })\n    onMount(store, () => {\n      let destroy\n      if (init) destroy = init(store, id, ...args)\n      return () => {\n        delete Creator.cache[id]\n        if (destroy) destroy()\n      }\n    })\n    return store\n  }\n\n  Creator.cache = {}\n\n  if (process.env.NODE_ENV !== 'production') {\n    Creator[clean] = () => {\n      for (let id in Creator.cache) {\n        Creator.cache[id][clean]()\n      }\n      Creator.cache = {}\n    }\n  }\n\n  return Creator\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import type { Atom, ReadableAtom } from 'nanostores';\nimport { onMount, atom } from 'nanostores';\nimport { dequal } from 'dequal'\n\nconst memo = <T, K>(input: Atom<T>, cb: (value: T) => K) => {\n  const $memoized = atom<K>(cb(input.get()));\n\n  const unsubscribe = input.subscribe((value) => {\n    const comparable = cb(value);\n\n    if (!dequal($memoized.get(), comparable)) {\n      // @ts-ignore\n      $memoized.set(typeof comparable === 'object' ? { ...comparable } : Array.isArray(comparable) ? [...comparable] : comparable)\n    }\n  })\n\n  onMount($memoized, () => {\n    return unsubscribe;\n  })\n\n  return $memoized as ReadableAtom<K>;\n}\n\nexport { memo }\n","import type { BaseDeepMap, DeepMapStore } from 'nanostores'\nimport { deepMap, setPath } from 'nanostores'\n\ntype AnyFunction = (...args: any[]) => any;\n\n/**\n * @deprecated\n * @todo remove it\n */\ntype NoInfer<T> = [T][T extends any ? 0 : never];\n\ntype GetPath<$AtomValue extends object, $MutateValue> = (object: $AtomValue) => $MutateValue;\ntype Setter<T> = T extends AnyFunction ? () => T : (T | ((prev: T) => T))\n\ntype DeepAtom<T extends BaseDeepMap> = DeepMapStore<T> & {\n  mutate: <$MutateValue>(getPath: ((object: T) => $MutateValue), setter: Setter<NoInfer<$MutateValue>>) => NoInfer<$MutateValue>;\n}\n\nconst usePath = <$AtomValue extends BaseDeepMap, $MutateValue>(atomValue: $AtomValue, getPath: GetPath<$AtomValue, $MutateValue>) => {\n  const targets = new Set();\n  const path: PropertyKey[] = [];\n\n  let current;\n\n  const proxyHandler: ProxyHandler<any> = {\n    get(target, prop, receiver) {\n      if (targets.has(target)) {\n        /**\n         * Same property was accessed twice\n         */\n        throw new ReferenceError(`Attempted to access property on the same target multiple times.`)\n      }\n\n      const value = Reflect.get(target, prop, receiver);\n\n      targets.add(target);\n      path.push(prop);\n\n      current = value;\n\n      if (value === undefined) {\n        return new Proxy({}, proxyHandler);\n      }\n\n      if (value && typeof value === 'object') {\n        return new Proxy(value, proxyHandler);\n      }\n\n      return value;\n    },\n  }\n\n  getPath(new Proxy(atomValue, proxyHandler));\n\n  if (path.length === 0) {\n    throw new Error('No valid path extracted from the provided getPath function.')\n  }\n\n  return {\n    path,\n    value: current as $MutateValue\n  }\n}\n\n/**\n * Creates a `deepMap` extended with `mutate` method\n *\n * @example\n * ```ts\n * const $user = deepAtom({ age: 16 });\n *\n * $user.mutate((s) => s.age, (age) => age + 1);\n * ```\n */\nconst deepAtom = <$AtomValue extends BaseDeepMap>(init: $AtomValue): DeepAtom<$AtomValue> => {\n  const $atom = deepMap(init) as unknown as DeepAtom<$AtomValue>;\n\n  $atom.mutate = (getPath, setter) => {\n    const { path, value } = usePath($atom.get(), getPath);\n\n    const newValue = typeof setter === 'function' ? setter(value) : setter;\n\n    if (newValue === value) {\n      return newValue;\n    }\n\n    const oldValue = $atom.value;\n\n    /**\n     * They split string and then call flatMap, but we are going to pass an array directly\n     * @link https://github.com/nanostores/nanostores/blob/56b0fbc7f51d94073191309376b9cf63948b2c91/deep-map/path.js#L41\n     */\n    const fakedPath = {\n      split: () => {\n        return {\n          flatMap: () => {\n            return path;\n          }\n        }\n      }\n    }\n\n    // @ts-expect-error Value is actually is not read-only\n    $atom.value = setPath($atom.value, fakedPath, newValue)\n    // @ts-expect-error There is a hidden notify method\n    $atom.notify(oldValue, path.join('.'))\n\n    return newValue;\n  }\n\n  return $atom;\n}\n\nexport { deepAtom }\nexport type { DeepAtom }\n","import type { CustomHandler, CustomHandlerGetResult } from '@novely/core';\nimport type { BaseDeepMap } from 'nanostores';\nimport type { DeepAtom } from '../atoms/deep-atom';\nimport { onMount, cleanStores } from 'nanostores';\nimport { deepAtom } from '../atoms/deep-atom';\n\ntype Disposable = {\n  /**\n   * Function that is called after action is completed and game should move forward\n   *\n   * @example\n   * ```ts\n   * function handleTextActionClick() {\n   *   const { resolve } = contextState.get().text;\n   *\n   *   // as user clicked on text we will hide text by updating this store\n   *   contextState.setKey('text', { content: '' });\n   *\n   *   // now proceed to go to next action\n   *   resolve()\n   * }\n   * ```\n   */\n  resolve?: () => void;\n}\n\ntype WithActionVisibility = {\n  /**\n   * Used to check if something should be rendered\n   */\n  visible: boolean;\n}\n\ntype Labelled = {\n  /**\n   * Label for the action.\n   *\n   * In example for Input action it might be \"Enter youʼ age\", and for Choice action it might be \"Select youʼr next move\"\n   */\n  label: string;\n}\n\ntype ContextStateBackground = {\n  /**\n   * In-game background image\n   */\n  background: string;\n  /**\n   * Function that is NOT provided by core. You can set it yourself.\n   */\n  clear?: () => void;\n}\n\ntype ContextStateCharacter = WithActionVisibility & {\n  /**\n   * Basically `element.style`\n   */\n  style: string | undefined;\n  /**\n   * Character removal can be delayed so it could be removed with animation.\n   *\n   * Storing timeout id is needed to cancel it if in example ShowCharacter was called before time for removal came to the end to prevent character unexpectedly be removed\n   */\n  hideTimeoutId?: ReturnType<typeof setTimeout>;\n}\n\ntype ContextStateCharacters = {\n  [key: string]: ContextStateCharacter | undefined;\n}\n\ntype ContextStateCustomHandler = {\n  /**\n   * Node in which custom action is rendered\n   */\n  node: null | HTMLDivElement;\n  /**\n   * Custom Handler function itself\n   */\n  fn: CustomHandler;\n  /**\n   * Clear Function. Removes the action.\n   */\n  clear: () => void;\n}\n\ntype ContextStateCustomHandlers = {\n  [key: string]: ContextStateCustomHandler | undefined\n}\n\ntype ContextStateText = Disposable & {\n  /**\n   * Text to be rendered\n   */\n  content: string;\n}\n\ntype ContextStateDialog = Disposable & WithActionVisibility & {\n  /**\n   * Character lyrics\n   */\n  content: string;\n  /**\n   * Character lyrics. It might be also empty\n   */\n  name: string;\n  /**\n   * Miniature character rendered along with text\n   */\n  miniature: {\n    /**\n     * Character\n     */\n    character?: string;\n    /**\n     * Character's emotion\n     */\n    emotion?: string;\n  }\n}\n\ntype ContextStateInput = Disposable & WithActionVisibility & Labelled & {\n  /**\n   * Input Element. Input action very dependent on DOM so this is needed\n   */\n  element: null | HTMLInputElement;\n  /**\n   * When input validation failed this error message should be shown near input element.\n   * When error is present, going to next action should be restricted.\n   */\n  error: string;\n  /**\n   * Function that should be called before input action should be removed\n   */\n  cleanup?: () => void;\n}\n\ntype ContextStateChoice = WithActionVisibility & Labelled & {\n  /**\n   * It is an array of choices.\n   *\n   * First item of choice is a choice text and second one is active it or not.\n   * When choice is not action it should be impossible to select that choice.\n   */\n  choices: [string, boolean][];\n  /**\n   * Function that is called after choice was made and game should move forward\n   * @param selected index\n   * @example\n   * ```ts\n   * function handleChoiceActionSelection() {\n   *   const index = document.querySelector('select.choice').selectedIndex;\n   *\n   *   const { resolve } = contextState.get().choice;\n   *\n   *   // pass index\n   *   resolve(index);\n   *\n   *   contextState.setKey('choice', { choices: [] });\n   * }\n   * ```\n   */\n  resolve?: (selected: number) => void;\n}\n\ntype ContextStateMeta = {\n  /**\n   * Is it currently in restoring phase\n   */\n  restoring: boolean\n  /**\n   * Is it in preview mode\n   *\n   * In this mode game should be un-playable\n   */\n  preview: boolean\n  /**\n   * Is Novely in goingBack state\n   */\n  goingBack: boolean\n}\n\n/**\n * State which is related to game contexts and contains data about it\n */\ntype ContextState = {\n  /**\n   * ShowBackground action.\n   */\n  background: ContextStateBackground;\n  /**\n   * Character information.\n   */\n  characters: ContextStateCharacters;\n  /**\n   * Text action. Basically shown over other action\n   */\n  text: ContextStateText;\n  /**\n   * Dialog action.\n   */\n  dialog: ContextStateDialog;\n  /**\n   * Input action.\n   */\n  input: ContextStateInput;\n  /**\n   * Choice action.\n   */\n  choice: ContextStateChoice;\n  /**\n  * Meta information about current context\n  */\n  meta: ContextStateMeta;\n  /**\n   * Custom Action store\n   */\n  custom: ContextStateCustomHandlers;\n}\n\nconst defaultEmpty = {} satisfies BaseDeepMap;\n\ntype ContextStateStore<Extension extends BaseDeepMap = typeof defaultEmpty> = ContextState & Extension\n\nconst getDefaultContextState = (): ContextState => {\n  return {\n    background: {\n      background: '#000',\n    },\n    characters: {},\n    choice: {\n      label: '',\n      visible: false,\n      choices: [],\n    },\n    dialog: {\n      content: '',\n      name: '',\n      visible: false,\n      miniature: {},\n    },\n    input: {\n      element: null,\n      label: '',\n      error: '',\n      visible: false\n    },\n    text: {\n      content: ''\n    },\n    custom: {},\n    meta: {\n      restoring: false,\n      goingBack: false,\n      preview: false\n    }\n  }\n}\n\n/**\n * Creates typed context state root\n *\n * @example\n * ```ts\n * const { useContextState, removeContextState } = createContextStateRoot<{ additionalContextProp: number }>(() => {\n *   return {\n *     additionalContextProp: 123\n *   }\n * });\n *\n * // when you want to create or get context state\n * useContextState('id here')\n *\n * // when context state should be removed\n * removeContextState('id here')\n * ```\n */\nconst createContextStateRoot = <Extension extends BaseDeepMap = typeof defaultEmpty>(getExtension: () => Extension = () => ({}) as Extension) => {\n  const CACHE = new Map<string, DeepAtom<ContextStateStore<Extension>>>();\n\n  const make = () => {\n    const contextState = deepAtom<ContextStateStore<Extension>>({\n      ...getDefaultContextState(),\n      ...getExtension()\n    } as ContextStateStore<Extension>);\n\n    return contextState;\n  }\n\n  const remove = (id: string) => {\n    const contextState = CACHE.get(id);\n\n    if (contextState) {\n      cleanStores(contextState)\n    }\n\n    CACHE.delete(id);\n  }\n\n  const use = (id: string) => {\n    const cached = CACHE.get(id);\n\n    if (cached) {\n      return cached;\n    }\n\n    const contextState = make();\n\n    CACHE.set(id, contextState);\n\n    onMount(contextState, () => {\n      return () => {\n        CACHE.delete(id);\n      }\n    })\n\n    return contextState;\n  }\n\n  return {\n    useContextState: use,\n    removeContextState: remove\n  }\n}\n\nexport { createContextStateRoot }\nexport type {\n  ContextStateStore,\n  ContextState,\n  ContextStateCharacter,\n  ContextStateCustomHandler\n}\n","import type { NovelyScreen } from '@novely/core';\nimport type { BaseDeepMap } from 'nanostores';\nimport { deepAtom } from '../atoms/deep-atom';\n\n/**\n * State which is related to whole renderer\n */\ntype RendererState = {\n  /**\n   * Current screen that should be rendered\n   */\n  screen: NovelyScreen;\n  /**\n   * Is loading shown. Unlike screen 'loading', it does not change screen and shown above all layers\n   */\n  loadingShown: boolean;\n  /**\n   * Is exit prompt should be shown\n   */\n  exitPromptShown: boolean;\n}\n\nconst defaultEmpty = {} satisfies BaseDeepMap;\n\ntype RendererStateStore<Extension extends BaseDeepMap = typeof defaultEmpty> = RendererState & Extension;\n\n/**\n * Helper to make renderer state with default recommended values\n * @param extension Additional object to be merged with default values\n * @returns Store\n * @example\n * ```ts\n * createRenderer(() => {\n *   const rendererState = createRendererState();\n *\n *   return {\n *     ui: {\n *       showScreen(name) {\n *         rendererState.setKey('screen', name)\n *       },\n *       getScreen() {\n *         return rendererState.get().screen;\n *       }\n *     }\n *   }\n * })\n * ```\n */\nconst createRendererState = <Extension extends BaseDeepMap = typeof defaultEmpty>(extension = defaultEmpty as Extension) => {\n  const rendererState = deepAtom<RendererStateStore<Extension>>({\n    screen: 'mainmenu',\n    loadingShown: false,\n    exitPromptShown: false,\n    ...extension\n  } as RendererStateStore<Extension>)\n\n  return rendererState;\n}\n\nexport { createRendererState }\nexport type { RendererState, RendererStateStore }\n","const noop = () => {};\n\nexport { noop }\n","const findLastIndex = <T>(array: T[], fn: (this: T[], item: T, index: number, array: T[]) => boolean) => {\n\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\tif (fn.call(array, array[i], i, array)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n};\n\n/**\n * Using this because `Array.prototype.findLast` has not enough support\n * @see https://caniuse.com/?search=findLast\n */\nconst findLast = <T>(array: T[], fn: (this: T[], item: T, index: number, array: T[]) => boolean) => {\n\treturn array[findLastIndex(array, fn)];\n}\n\nexport { findLastIndex, findLast }\n","const escaped: Record<string, string> = {\n\t'\"': '&quot;',\n\t\"'\": '&#39;',\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n};\n\nconst escapeHTML = (str: string) => {\n\treturn String(str).replace(/[\"'&<>]/g, (match) => escaped[match]);\n};\n\nexport { escapeHTML }\n","import { noop } from \"../utils\";\n\n/**\n * Unmounts app\n *\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * root.render(<App />);\n *\n * // this is we want\n * root.unmount();\n * ```\n */\ntype StartFunctionUnMountFn = () => void;\n\n/**\n * Mounts app, returns unmount function\n *\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * function start() {\n *   root.render(<App />);\n *\n *   return () => {\n *     root.unmount();\n *   }\n * }\n * ```\n */\ntype StartFunctionMountFn = () => StartFunctionUnMountFn;\n\n/**\n * @example\n * ```ts\n * import { createRoot } from 'react-dom/client';\n *\n * const root = createRoot(document.body);\n *\n * createStartFunction(() => {\n *   root.render(<App />);\n *\n *   return () => {\n *     root.unmount();\n *   }\n * })\n * ```\n */\nconst createStartFunction = (fn: StartFunctionMountFn) => {\n  let unmount: StartFunctionUnMountFn = noop;\n\n  return () => {\n    unmount();\n    unmount = fn();\n\n    return {\n      unmount: () => {\n        unmount();\n        unmount = noop;\n      }\n    }\n  }\n}\n\nexport { createStartFunction }\nexport type { StartFunctionMountFn, StartFunctionUnMountFn }\n","/*\nHow it works:\n`this.#head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.#head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.#tail` so that it can reference it to add a new value.\n*/\n\nclass Node {\n\tvalue;\n\tnext;\n\n\tconstructor(value) {\n\t\tthis.value = value;\n\t}\n}\n\nexport default class Queue {\n\t#head;\n\t#tail;\n\t#size;\n\n\tconstructor() {\n\t\tthis.clear();\n\t}\n\n\tenqueue(value) {\n\t\tconst node = new Node(value);\n\n\t\tif (this.#head) {\n\t\t\tthis.#tail.next = node;\n\t\t\tthis.#tail = node;\n\t\t} else {\n\t\t\tthis.#head = node;\n\t\t\tthis.#tail = node;\n\t\t}\n\n\t\tthis.#size++;\n\t}\n\n\tdequeue() {\n\t\tconst current = this.#head;\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#head = this.#head.next;\n\t\tthis.#size--;\n\t\treturn current.value;\n\t}\n\n\tpeek() {\n\t\tif (!this.#head) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.#head.value;\n\n\t\t// TODO: Node.js 18.\n\t\t// return this.#head?.value;\n\t}\n\n\tclear() {\n\t\tthis.#head = undefined;\n\t\tthis.#tail = undefined;\n\t\tthis.#size = 0;\n\t}\n\n\tget size() {\n\t\treturn this.#size;\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tlet current = this.#head;\n\n\t\twhile (current) {\n\t\t\tyield current.value;\n\t\t\tcurrent = current.next;\n\t\t}\n\t}\n}\n","import Queue from 'yocto-queue';\n\nexport default function pLimit(concurrency) {\n\tvalidateConcurrency(concurrency);\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst resumeNext = () => {\n\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t\t// Since `pendingCount` has been decreased by one, increase `activeCount` by one.\n\t\t\tactiveCount++;\n\t\t}\n\t};\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tresumeNext();\n\t};\n\n\tconst run = async (function_, resolve, arguments_) => {\n\t\tconst result = (async () => function_(...arguments_))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (function_, resolve, arguments_) => {\n\t\t// Queue `internalResolve` instead of the `run` function\n\t\t// to preserve asynchronous context.\n\t\tnew Promise(internalResolve => {\n\t\t\tqueue.enqueue(internalResolve);\n\t\t}).then(\n\t\t\trun.bind(undefined, function_, resolve, arguments_),\n\t\t);\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// after the `internalResolve` function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency) {\n\t\t\t\tresumeNext();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (function_, ...arguments_) => new Promise(resolve => {\n\t\tenqueue(function_, resolve, arguments_);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount,\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size,\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue() {\n\t\t\t\tqueue.clear();\n\t\t\t},\n\t\t},\n\t\tconcurrency: {\n\t\t\tget: () => concurrency,\n\n\t\t\tset(newConcurrency) {\n\t\t\t\tvalidateConcurrency(newConcurrency);\n\t\t\t\tconcurrency = newConcurrency;\n\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t// eslint-disable-next-line no-unmodified-loop-condition\n\t\t\t\t\twhile (activeCount < concurrency && queue.size > 0) {\n\t\t\t\t\t\tresumeNext();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t});\n\n\treturn generator;\n}\n\nfunction validateConcurrency(concurrency) {\n\tif (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n}\n","const waitForInteraction = (() => {\n  const { promise, resolve } = Promise.withResolvers<void>();\n\t\n\tconst onUserInteraction = () => {\n\t\tresolve();\n\t};\n\n\tdocument.addEventListener('touchstart', onUserInteraction, { once: true });\n\tdocument.addEventListener('touchend', onUserInteraction, { once: true });\n\tdocument.addEventListener('click', onUserInteraction, { once: true });\n\tdocument.addEventListener('keydown', onUserInteraction, { once: true });\n\n\treturn () => {\n    return promise;\n  };\n})();\n\nexport { waitForInteraction }","type EventHandler<T> = (this: Document, event: T) => void;\n\ntype BlurEventHandler = EventHandler<Event>;\ntype FocusEventHandler = EventHandler<FocusEvent>;\n\nconst BLUR_HANDLERS = new Set<BlurEventHandler>();\nconst FOCUS_HANDLERS = new Set<FocusEventHandler>();\n\ntype EventListeners = {\n  focus: FocusEventHandler;\n  blur: BlurEventHandler;\n}\n\nconst registerEventListeners = (listeners: EventListeners) => {\n  BLUR_HANDLERS.add(listeners.blur);\n  FOCUS_HANDLERS.add(listeners.focus);\n\n  return () => {\n    BLUR_HANDLERS.delete(listeners.blur);\n    FOCUS_HANDLERS.delete(listeners.focus);\n  }\n}\n\naddEventListener('focus', function (event) {\n  for (const handler of FOCUS_HANDLERS) {\n    try {\n      handler.call(this.document, event);\n    } catch {}\n  }\n});\n\naddEventListener('blur', function (event) {\n  for (const handler of BLUR_HANDLERS) {\n    try {\n      handler.call(this.document, event);\n    } catch {}\n  }\n});\n\nexport { registerEventListeners, BLUR_HANDLERS as _BLUR_HANDLERS, FOCUS_HANDLERS as _FOCUS_HANDLERS }\nexport type { EventHandler, BlurEventHandler, FocusEventHandler, EventListeners }","import pLimit from 'p-limit';\n\ntype Thenable<T> = T | Promise<T>;\ntype Queue = (() => Thenable<void>)[]\n\nconst createQueue = (queue: Queue, stopped = false) => {\n  const limit = pLimit(1);\n\n  const run = async () => {\n    const items = queue.slice();\n\n    for await (const item of items) {\n      if (stopped) break;\n\n      try {\n        await item();\n      } catch (error) {\n        console.error(error);\n        \n        /**\n         * In case that exception is handled then stopped will be set manually in catch block\n         * But in other cases stop it here\n         */\n        stopped = true;\n      }\n    }\n\n    queue = queue.filter(item => !items.includes(item));\n    stopped = false;\n  };\n\n  return {\n    get queue() {\n      return queue;\n    },\n    set queue(value) {\n      queue = value;\n    },\n    stop() {\n      stopped = true;\n    },\n    execute: () => {\n      return limit(run);\n    }\n  }\n}\n\nexport { createQueue }\nexport type { Queue }","/**\n * Primitive memo key-based wrapper.\n * \n * This memoization function wraps an asynchronous function and caches its result\n * based on a unique key. If the function has already been called with the same\n * key, the cached result (a promise) will be returned instead of invoking the\n * function again.\n * \n * @warning\n * This cache implementation does not handle promise rejections. If the provided\n * function's promise is rejected, the rejection will be cached, and any subsequent\n * calls with the same key will return the same rejected promise.\n */\nconst createMemo = <T>() => {\n  const cache = new Map<string, Promise<T>>()\n\n  return (key: string, fn: () => Promise<T>) => {\n    return () => {\n      const preserved = cache.get(key);\n\n      if (preserved) {\n        return preserved;\n      }\n\n      const promise = fn();\n\n      cache.set(key, promise);\n\n      return promise;\n    }\n  }\n}\n\nexport { createMemo }","import type { AudioInstance } from \"./types\";\nimport { waitForInteraction } from \"./wait_for_interaction\";\nimport { registerEventListeners } from './browser-events';\nimport { createQueue } from './queue';\nimport { createMemo } from './memo';\n\nconst fetcherMemo = createMemo<ArrayBuffer>();\nconst decoderMemo = createMemo<AudioBuffer>();\n\ntype ExtendAudioGraphOptions = {\n  context: AudioContext;\n  node: GainNode;\n}\n\ntype AudioNodeLike = {\n  connect: ((destinationNode: AudioNode) => void);\n}\n\ntype ExtendAudioGraph = (options: ExtendAudioGraphOptions) => AudioNode | AudioNodeLike;\n\ntype AudioOptions = {\n  /**\n   * Source\n   */\n  src: string;\n  /**\n   * Loop\n   * @default false\n   */\n  loop?: boolean;\n  /**\n   * Volume\n   * @default 1\n   */\n  volume?: number;\n  /**\n   * Will pause playing on blur event, play on focus.\n   * @default false\n   */\n  pauseOnBlur?: boolean;\n  /**\n   * @default false\n   */\n  autoplay?: boolean;\n  /**\n   * Function to extend audio \"graph\"\n   */\n  extendAudioGraph?: ExtendAudioGraph;\n};\n\nconst createAudio = (options: AudioOptions) => {\n  let audioContext: AudioContext;\n  let gainNode: GainNode;\n  let bufferSource: AudioBufferSourceNode;\n  let arrayBuffer: ArrayBuffer;\n  let audioBuffer: AudioBuffer;\n\n  /**\n   * Values that pending it's queue to be set\n   */\n  let pendingVolume = options.volume || 1;\n  let pendingLoop = options.loop || false;\n\n  const createAudioContext = () => {\n    audioContext = new AudioContext()\n  }\n\n  const getGainNode = () => {\n    return gainNode;\n  }\n\n  const createGainNode = () => {\n    gainNode = audioContext.createGain();\n\n    const node = (options.extendAudioGraph || getGainNode)({\n      context: audioContext,\n      node: gainNode\n    });\n\n    node.connect(audioContext.destination);\n  }\n\n  const createBufferSource = () => {\n    bufferSource = audioContext.createBufferSource();\n  }\n\n  const interruptQueueThenDestroy = (cause: Error | unknown) => {\n    /**\n     * Firstly prevent next queue items from running because they depend on previous items\n     * Then destroy audio because there is no reason to try run it over and over again\n     */\n    queue.stop();\n    instance.destroy();\n\n    return new Error('', { cause });\n  }\n\n  const fetchArrayBuffer = fetcherMemo(options.src, async () => {\n    try {\n      return await fetch(options.src).then(response => response.arrayBuffer());\n    } catch (error) {\n      throw interruptQueueThenDestroy(error);\n    }\n  });\n\n  const setArrayBuffer = async () => {\n    arrayBuffer = await fetchArrayBuffer();\n  }\n\n  const decodeAudioData = decoderMemo(options.src, async () => {\n    try {\n      return await audioContext.decodeAudioData(arrayBuffer);\n    } catch (error) {\n      throw interruptQueueThenDestroy(error);\n    }\n  })\n\n  const setAudioData = async () => {\n    audioBuffer = await decodeAudioData();\n  }\n\n  const connectSources = () => {\n    if (bufferSource && bufferSource.buffer === null) {\n      bufferSource.buffer = audioBuffer;\n      bufferSource.connect(gainNode);\n    }\n  }\n\n  const setVolume = () => {\n    gainNode.gain.value = pendingVolume;\n  }\n\n  const setLoop = () => {\n    bufferSource.loop = pendingLoop;\n  }\n\n  const queue = createQueue([\n    waitForInteraction,\n    createAudioContext,\n    createGainNode,\n    setVolume,\n    createBufferSource,\n    setLoop,\n    fetchArrayBuffer,\n    setArrayBuffer,\n    decodeAudioData,\n    setAudioData,\n    connectSources,\n  ]);\n\n  /**\n   * Will resume when focus or not\n   */\n  let resume = false;\n\n  const unregister = registerEventListeners({\n    focus: () => {\n      if (!options.pauseOnBlur || !resume || state.destroyed) return;\n\n      resume = false;\n\n      queue.queue.push(playAudio);\n      queue.execute()\n    },\n    blur: () => {\n      if (!options.pauseOnBlur || !state.playing || state.destroyed) return;\n\n      resume = true;\n\n      queue.queue.push(pauseAudio);\n      queue.execute()\n    }\n  });\n\n  const state = {\n    started: false,\n    playing: false,\n    destroyed: false\n  };\n\n  const playAudio = async () => {\n    if (state.destroyed) return;\n\n    if (audioContext.state === \"suspended\") {\n      await audioContext.resume();\n\n      if (state.started) {\n        state.playing = true;\n      }\n    }\n\n    if (!state.started) {\n      bufferSource.start();\n\n      state.started = true;\n      state.playing = true;\n    }\n  }\n\n  const pauseAudio = async () => {\n    if (state.destroyed) return;\n    \n    if (audioContext.state === \"suspended\" && queue.queue.at(-1) === playAudio) {\n      queue.queue.pop();\n    }\n\n    if (audioContext.state === \"running\") {\n      await audioContext.suspend();\n\n      state.playing = false;\n    }\n  }\n\n  const disconnectAudio = async () => {\n    bufferSource && bufferSource.disconnect();\n\n    /**\n     * Reset `started` value\n     * That will make `source.start()` call when `play()` will be called\n     */\n    state.started = false;\n  }\n\n  const instance = {\n    async play() {\n      if (state.destroyed) return;\n      \n      queue.queue.push(playAudio);\n\n      return queue.execute();\n    },\n    async pause() {\n      if (state.destroyed) return;\n      \n      queue.queue.push(pauseAudio);\n\n      return queue.execute();\n    },\n    async reset() {\n      if (state.destroyed) return;\n\n      if (state.playing) {\n        queue.queue.push(pauseAudio)\n      }\n\n      queue.queue.push(\n        disconnectAudio,\n        createBufferSource,\n        setLoop,\n        connectSources\n      );\n\n      if (state.playing) {\n        queue.queue.push(playAudio)\n      }\n\n      return queue.execute();\n    },\n    async stop() {\n      if (state.destroyed) return;\n\n      queue.queue.push(\n        pauseAudio,\n        disconnectAudio,\n        createBufferSource,\n        setLoop,\n        connectSources\n      );\n\n      return queue.execute();\n    },\n    async destroy() {\n      if (state.destroyed) return;\n\n      unregister();\n\n      queue.queue = [\n        pauseAudio,\n        disconnectAudio\n      ];\n\n      await queue.execute();\n\n      state.destroyed = true;\n\n      // @ts-expect-error\n      audioContext = null;\n      // @ts-expect-error\n      gainNode = null;\n      // @ts-expect-error\n      bufferSource = null;\n      // @ts-expect-error\n      arrayBuffer = null;\n      // @ts-expect-error\n      audioBuffer = null;\n    },\n    async fetch() {\n      if (state.destroyed) return;\n\n      await fetchArrayBuffer();\n    },\n    get playing() {\n      return state.playing;\n    },\n    get destroyed() {\n      return state.destroyed;\n    },\n    get volume() {\n      return pendingVolume;\n    },\n    set volume(value) {\n      if (state.destroyed) return;\n\n      pendingVolume = value;\n      queue.queue.push(setVolume);\n      queue.execute()\n    },\n    get loop() {\n      return pendingLoop;\n    },\n    set loop(value) {\n      if (state.destroyed) return;\n     \n      pendingLoop = value;\n      queue.queue.push(setLoop);\n      queue.execute()\n    }\n  } satisfies AudioInstance;\n\n  if (options.autoplay) {\n    queue.queue.push(playAudio)\n    queue.execute()\n  }\n\n  return instance;\n};\n\nconst prefetchAudio = (src: string) => {\n  const fetcher = fetcherMemo(src, () => fetch(src).then(res => res.arrayBuffer()));\n\n  return fetcher();\n}\n\nexport { prefetchAudio, createAudio };\nexport type { AudioOptions }","import type { AudioStore } from './types';\nimport type { AudioHandle, Context, Stored, StorageData, Data, Renderer } from '@novely/core';\nimport { createAudio as createWebAudio, prefetchAudio } from 'simple-web-audio';\nimport { noop } from '../utils';\n\ntype AudioContext = Context['audio'];\ntype AudioMisc = Pick<Renderer['misc'], 'preloadAudioBlocking'>;\ntype StorageDataStore = Stored<StorageData<string, Data>>;\n\ntype KeepAudio = {\n  music: Set<string>;\n  sounds: Set<string>;\n}\n\nconst TYPE_META_MAP = {\n  'music': 2,\n  'sound': 3,\n  'voice': 4\n} as const;\n\n/**\n * Audio easy! This implementation uses `simple-web-audio` package under the hood.\n *\n * @example\n * ```ts\n * const audio = createAudio(options.storageData);\n * ```\n */\nconst createAudio = (storageData: StorageDataStore) => {\n  const store: AudioStore = {\n    music: {},\n    sound: {},\n    voices: {},\n  }\n\n  const getVolume = (type: 'music' | 'sound' | 'voice') => {\n    return storageData.get().meta[TYPE_META_MAP[type]];\n  }\n\n  const getAudio = (type: 'music' | 'sound' | 'voice', src: string) => {\n    const kind = type === 'voice' ? 'voices' : type;\n    const cached = store[kind][src];\n\n    if (cached) return cached;\n\n    const audio = createWebAudio({\n      src,\n      volume: getVolume(type),\n      pauseOnBlur: true\n    })\n\n    store[kind][src] = audio;\n\n    return audio;\n  }\n\n  let unsubscribe = noop;\n\n  const context: AudioContext = {\n    music(src, method) {\n      const resource = getAudio(method, src);\n\n      this.start();\n\n      return {\n        pause() {\n          resource.pause();\n        },\n        play(loop) {\n          try {\n            resource.loop = loop;\n          } catch {}\n\n          resource.play();\n        },\n        stop() {\n          resource.stop();\n        },\n      } satisfies AudioHandle;\n    },\n    voice(source) {\n      this.start();\n      this.voiceStop();\n\n      const resource = store.voice = getAudio('voice', source);\n\n      resource.play();\n    },\n    voiceStop() {\n      if (!store.voice) return;\n\n      store.voice.stop();\n      store.voice = undefined;\n    },\n    start() {\n      if (unsubscribe !== noop) return;\n\n      /**\n       * Subscribe for volume changes in settings\n       */\n      unsubscribe = storageData.subscribe(() => {\n        for (const type of ['music', 'sound', 'voice'] as const) {\n          const volume = getVolume(type);\n\n          if (type === 'music' || type === 'sound') {\n            for (const audio of Object.values(store[type])) {\n              if (!audio) continue;\n\n              try {\n                audio.volume = volume;\n              } catch {}\n            }\n          }\n\n          if (type === 'voice') {\n            const audio = store.voice;\n\n            if (audio) {\n              try {\n                audio.volume = volume;\n              } catch {}\n            }\n          }\n        }\n      });\n    },\n    clear() {\n      const musics = Object.values(store.music);\n      const sounds = Object.values(store.sound);\n\n      for (const music of [...musics, ...sounds]) {\n        // todo: при переходе в настройки для музыки не делать бы stop, а делать pause\n        music?.stop()\n      }\n\n      this.voiceStop();\n    },\n    destroy() {\n      unsubscribe();\n      this.clear();\n\n      unsubscribe = noop;\n    }\n  };\n\n  /**\n   * Used in clear action when audio should be cleared\n   * @param keepAudio Passed from Clear Action\n   */\n  const clear = (keepAudio: KeepAudio) => {\n    context.voiceStop();\n\n    const musics = Object.entries(store.music).filter(([name]) => keepAudio.music && !keepAudio.music.has(name)).map(([_, h]) => h);\n    const sounds = Object.entries(store.sound).filter(([name]) => keepAudio.sounds && !keepAudio.sounds.has(name)).map(([_, h]) => h);\n\n    for (const music of [...musics, ...sounds]) {\n      if (!music) continue;\n\n      music.stop()\n    }\n  }\n\n  return {\n    context,\n\n    clear,\n\n    getVolume,\n    getAudio\n  }\n}\n\nconst createAudioMisc = () => {\n  const misc: AudioMisc = {\n    preloadAudioBlocking: async (src) => {\n      await prefetchAudio(src);\n    }\n  };\n\n  return misc;\n}\n\nexport { createAudioMisc, createAudio }\n","/**\n * Creates a map of mutable objects\n *\n * todo: practical usage\n *\n * @example\n * ```ts\n * const { useShared, removeShared } = createShared<{ count: number }>(() => {\n *   return {\n *     count: 0\n *   }\n * })\n *\n * useShared('HELLO').count += 1\n * console.log(useShared('HELLO').count) // prints 1\n *\n * useShared('WORLD').count += 1\n * console.log(useShared('WORLD').count) // prints 1 too\n * ```\n */\nconst createShared = <T extends Record<PropertyKey, unknown>>(get: () => T) => {\n  const CACHE = new Map<string, T>();\n\n  const use = (id: string) => {\n    const cached = CACHE.get(id);\n\n    if (cached) {\n      return cached\n    }\n\n    const shared = get();\n\n    CACHE.set(id, shared);\n\n    return shared;\n  }\n\n  const remove = (id: string) => {\n    CACHE.delete(id);\n  }\n\n  return {\n    useShared: use,\n    removeShared: remove\n  }\n}\n\nexport { createShared }\n","import type { Context } from \"@novely/core\"\n\n/**\n * Creates utilities to manage context's in renderer\n * @example\n * ```ts\n * function renderer(options: RendererInit) {\n *   const { getContextCached, removeContext } = createGetContext();\n *\n *   return {\n *     getContext: getContextCached((key) => {\n *       // return Context\n *       return {}\n *     }),\n *     removeContext: (key) => {\n *       removeContext(key);\n *     }\n *   }\n * }\n * ```\n */\nconst createGetContext = () => {\n  const CACHE = new Map<string, Context>();\n\n  /**\n   * Creates context on call, but if context was already created, returns already created context\n   * @param createContext Function to create context\n   * @example\n   * ```ts\n   * function renderer(options: RendererInit) {\n   *   return {\n   *     getContext: getContextCached((key) => {\n   *       // return Context\n   *       return {}\n   *     }),\n   *     removeContext: (key) => {\n   *       removeContext(key);\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  const getContextCached = (createContext: (key: string) => Context) => {\n    return (key: string) => {\n      const cached = CACHE.get(key);\n\n      if (cached) {\n        return cached;\n      }\n\n      const context = createContext(key);\n\n      CACHE.set(key, context)\n\n      return context;\n    }\n  }\n\n  /**\n   * Removed context\n   * @param key Context's key\n   * @example\n   * ```ts\n   * function renderer(options: RendererInit) {\n   *   return {\n   *     getContext: getContextCached((key) => {\n   *       // return Context\n   *       return {}\n   *     }),\n   *     removeContext: (key) => {\n   *       // remove context\n   *       removeContext(key);\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  const removeContext = (key: string) => {\n    CACHE.delete(key)\n  }\n\n  return {\n    getContextCached,\n    removeContext\n  }\n}\n\nexport { createGetContext }\n","import type { Context } from \"@novely/core\"\n\n/**\n * Simply set root to the context\n * @param getContext Function that returns main context\n * @example\n * ```ts\n * const { root, setRoot } = createRootSetter(() => renderer.getContext(options.mainContextKey));\n *\n * const renderer = {\n *   getContext: getContextCached((key) => {\n *     return {\n *       root: root()\n *     }\n *   }),\n *   ui: {\n *     start: createStartFunction(() => {\n *       // this is just an example, use your library to get the node\n *       const element = document.createElement('div');\n *\n *       document.body.appendChild(element);\n *\n *       setRoot(element);\n *\n *       return () => {\n *         element.remove();\n *       }\n *     })\n *   }\n * }\n * ```\n */\nconst createRootSetter = (getContext: () => Context) => {\n  let element: HTMLElement;\n\n  return {\n    root() {\n      return element\n    },\n    setRoot(root: HTMLElement) {\n      element = root;\n\n      const context = getContext();\n\n      /**\n       * Update directly if root was not set already\n       */\n      if (!context.root) {\n        context.root = root;\n      }\n    }\n  }\n}\n\nexport { createRootSetter }\n","const vibrationPossible = /* @__PURE__ */ (() => {\n\tlet possible = false;\n\n\tconst onPointerDown = () => {\n\t\tpossible = true;\n\t};\n\n\tconst isPossible = () => {\n\t\treturn possible;\n\t};\n\n\tdocument.addEventListener('pointerdown', onPointerDown, { once: true });\n\n\treturn isPossible;\n})();\n\n/**\n * Vibrate for browser environment\n */\nconst vibrate = (pattern: VibratePattern) => {\n\tif (vibrationPossible() && 'vibrate' in navigator) {\n\t\ttry {\n\t\t\tnavigator.vibrate(pattern);\n\t\t} catch {}\n\t}\n}\n\nexport { vibrate }\n","import { findLast } from \"../utils\";\n\nconst toMedia = (media: 'portrait' | 'landscape' | (string & Record<never, never>)) => {\n\tif (media === 'portrait' || media === 'landscape') {\n\t\treturn `(orientation: ${media})`;\n\t}\n\n\treturn media;\n};\n\nconst useBackground = (obj: Record<string, string>, set: (bg: string) => void) => {\n\t/**\n\t * Changes `portrait` to `(orientation: portrait)` and same for `landscape`\n\t */\n\tconst backgrounds = Object.fromEntries(Object.entries(obj).map(([key, value]) => [toMedia(key), value]))\n\n\tconst mediaQueries = Object.keys(backgrounds).map((media) => matchMedia(media));\n\tconst allMedia = mediaQueries.find(({ media }) => media === 'all');\n\n\tconst handle = () => {\n\t\tconst last = findLast(mediaQueries, ({ matches, media }) => matches && media !== 'all');\n\t\tconst bg = last\n\t\t\t? backgrounds[last.media]\n\t\t\t: allMedia\n\t\t\t\t? backgrounds['all']\n\t\t\t\t: '';\n\n\t\tset(bg);\n\t};\n\n\tfor (const mq of mediaQueries) {\n\t\tmq.onchange = handle;\n\t}\n\n\tlet disposed = false;\n\n\t/**\n\t * In case this will be immideately disposed `handle` call is put in Promise\n\t */\n\tPromise.resolve().then(() => {\n\t\tif (disposed) return;\n\n\t\thandle();\n\t})\n\n\treturn {\n\t\t/**\n\t\t * Remove all listeners\n\t\t */\n\t\tdispose() {\n\t\t\tfor (const mq of mediaQueries) {\n\t\t\t\tmq.onchange = null;\n\t\t\t}\n\n\t\t\tdisposed = true;\n\t\t}\n\t}\n}\n\nexport { useBackground }\n","import type {\n  BackgroundImage,\n  Context,\n  DefaultActionProxy,\n  RendererInit,\n  CustomHandler,\n  State,\n  ActionInputOnInputMeta,\n\tActionInputSetup,\n  CustomActionHandle\n} from '@novely/core'\nimport type { ContextState, ContextStateStore } from '../state/context-state'\nimport type { RendererStateStore } from '../state/renderer-state'\nimport type { DeepAtom } from '../atoms/deep-atom'\n\nimport { vibrate } from './vibrate'\nimport { useBackground } from './background'\nimport { escapeHTML, noop } from '../utils'\n\nconst allEmpty = (target: object | string | number | null | undefined) => {\n  if (typeof target === 'string') {\n    return target == '';\n  }\n\n  if (typeof target === 'number') {\n    return target == 0;\n  }\n\n  if (!target) {\n    return true;\n  }\n\n  if (Array.isArray(target) && target.length > 0) {\n    for (const inner of target) {\n      if (!allEmpty(inner)) {\n        return false;\n      }\n    }\n  }\n\n  for (const value of Object.values(target)) {\n    if (!allEmpty(value)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst handleBackgroundAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, background: string | BackgroundImage, onChange?: (currentBackground: string) => void) => {\n  const { clear } = $contextState.get().background;\n\n  clear && clear();\n\n  if (typeof background === 'string') {\n    $contextState.mutate((s) => s.background!, (prev) => {\n      return {\n        ...prev,\n        background\n      }\n    });\n\n    onChange?.(background);\n\n    return;\n  }\n\n  const { dispose } = useBackground(background, (value) => {\n    $contextState.mutate((s) => s.background, (prev) => {\n      return {\n        ...prev,\n        background: value\n      }\n    });\n    onChange?.(value);\n  })\n\n  $contextState.mutate((s) => s.background, (prev) => {\n    return {\n      ...prev,\n      clear: dispose\n    }\n  });\n}\n\nconst handleDialogAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, content: string, name: string, character: string | undefined, emotion: string | undefined, resolve: () => void) => {\n  $contextState.mutate(\n    (s) => s.dialog,\n    {\n      content,\n      name,\n      miniature: {\n        character,\n        emotion,\n      },\n      visible: true,\n      resolve,\n    }\n  );\n}\n\nconst handleChoiceAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, label: string, choices: [name: string, active: boolean][], resolve: (selected: number) => void) => {\n  $contextState.mutate(\n    (s) => s.choice,\n    { choices, label, resolve, visible: true }\n  );\n}\n\nconst handleClearAction = ($rendererState: DeepAtom<RendererStateStore<Record<PropertyKey, unknown>>>, $contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, options: RendererInit<any, any>, context: Context, keep: Set<keyof DefaultActionProxy>, keepCharacters: Set<string>) => {\n  $rendererState.mutate((s) => s.exitPromptShown, false);\n\n  if (!keep.has('showBackground')) {\n    $contextState.mutate((s) => s.background.background, '#000');\n  }\n\n  if (!keep.has('choice')) {\n    $contextState.mutate(\n      (s) => s.choice,\n      {\n        choices: [],\n        visible: false,\n        label: '',\n      }\n    );\n  }\n\n  const inputCleanup = $contextState.get().input.cleanup;\n\n  if (inputCleanup) {\n    inputCleanup();\n  }\n\n  if (!keep.has('input')) {\n    $contextState.mutate(\n      (s) => s.input,\n      {\n        element: null,\n        label: '',\n        visible: false,\n        error: '',\n      }\n    );\n  }\n\n  if (!keep.has('dialog')) {\n    $contextState.mutate(\n      (s) => s.dialog,\n      {\n        visible: false,\n        content: '',\n        name: '',\n        miniature: {}\n      }\n    );\n  }\n\n  if (!keep.has('text')) {\n    $contextState.mutate((s) => s.text, { content: '' });\n  }\n\n  const { characters, custom } = $contextState.get() as ContextState;\n\n  for (const character of Object.keys(characters)) {\n    if (!keepCharacters.has(character)) {\n      $contextState.mutate(\n        (s) => s.characters[character],\n        {\n          style: undefined,\n          visible: false\n        }\n      );\n    }\n  }\n\n  for (const [id, obj] of Object.entries(custom)) {\n    if (!obj) continue;\n    if (context.meta.goingBack && obj.fn.skipClearOnGoingBack) continue;\n\n    options.clearCustomAction(context, obj.fn);\n    $contextState.mutate((s) => s.custom[id], undefined);\n  }\n}\n\n/**\n * You must return value returned by this function\n */\nconst handleCustomAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, fn: CustomHandler<string, State>): CustomActionHandle => {\n  if (!$contextState.get().custom[fn.key]) {\n    $contextState.mutate(\n      (s) => s.custom[fn.key],\n      {\n        fn,\n        node: null,\n        clear: noop,\n      }\n    )\n  }\n\n  return {\n    setMountElement(node) {\n      $contextState.mutate(\n        (s) => s.custom[fn.key]!,\n        (state) => {\n          return {\n            ...state,\n            node\n          }\n        }\n      )\n    },\n    setClear(clear) {\n      $contextState.mutate(\n        (s) => s.custom[fn.key]!,\n        (state) => {\n          return {\n            ...state,\n            clear\n          }\n        }\n      )\n    },\n    remove() {\n      $contextState.mutate((s) => s.custom[fn.key], undefined);\n    }\n  }\n}\n\nconst handleClearBlockingActions = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, preserve?: \"choice\" | \"dialog\" | \"input\" | \"text\" | undefined) => {\n  const current = $contextState.get()\n\n  if (preserve !== 'choice' && !allEmpty(current.choice)) {\n    $contextState.mutate(\n      (s) => s.choice,\n      {\n        choices: [],\n        visible: false,\n        label: '',\n      }\n    );\n  }\n\n  if (preserve !== 'input' && !allEmpty(current.input)) {\n    $contextState.mutate(\n      (s) => s.input,\n      {\n        element: null,\n        label: '',\n        visible: false,\n        error: '',\n      }\n    );\n  }\n\n  if (preserve !== 'text' && !allEmpty(current.text)) {\n    $contextState.mutate((s) => s.text, { content: '' });\n  }\n\n  if (preserve !== 'dialog' && !allEmpty(current.dialog)) {\n    $contextState.mutate(\n      (s) => s.dialog,\n      {\n        visible: false,\n        content: '',\n        name: '',\n        miniature: {}\n      }\n    );\n  }\n}\n\nconst handleTextAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, content: string, resolve: () => void) => {\n  $contextState.mutate((s) => s.text, { content, resolve });\n}\n\nconst handleInputAction = ($contextState: DeepAtom<ContextStateStore<Record<PropertyKey, unknown>>>, options: RendererInit<any, any>, context: Context, label: string, onInput: (opts: ActionInputOnInputMeta<string, State>) => void, setup: ActionInputSetup, resolve: () => void) => {\n  const error = (value: string) => {\n    $contextState.mutate((s) => s.input.error, value);\n  };\n\n  const onInputHandler = (event: InputEvent & { currentTarget: HTMLInputElement }) => {\n    let value: string | undefined;\n\n    onInput({\n      lang: options.storageData.get().meta[0],\n      input,\n      event,\n      error,\n      state: options.getStateFunction(context.id),\n      get value() {\n        if (value) return value;\n        return (value = escapeHTML(input.value));\n      },\n    });\n  };\n\n  const input = document.createElement('input');\n\n  input.setAttribute('type', 'text')\n  input.setAttribute('name', 'novely-input')\n  input.setAttribute('required', 'true')\n  input.setAttribute('autocomplete', 'off')\n\n  // @ts-expect-error Type is actually correct\n  !context.meta.preview && input.addEventListener('input', onInputHandler);\n\n  $contextState.mutate(\n    (s) => s.input,\n    {\n      element: input,\n      label,\n      error: '',\n      visible: true,\n      cleanup: setup(input) || noop,\n      resolve,\n    }\n  );\n\n  /**\n   * Initially run the fake input event to handle errors & etc\n   */\n  !context.meta.preview && input.dispatchEvent(new InputEvent('input', { bubbles: true }));\n}\n\n\nconst handleVibrateAction = vibrate;\n\nexport {\n  handleBackgroundAction,\n  handleDialogAction,\n  handleChoiceAction,\n  handleClearAction,\n  handleCustomAction,\n  handleClearBlockingActions,\n  handleTextAction,\n  handleInputAction,\n  handleVibrateAction\n}\n"],"mappings":"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","names":["batched","getPath","createAudio"]}