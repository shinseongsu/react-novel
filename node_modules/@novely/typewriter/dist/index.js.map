{"version":3,"sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["const defaultSpeed = () => {\n\treturn Math.min(90 * Math.random() + 100, 90);\n};\n\nconst collectTextNodes = (el: HTMLElement | ChildNode | Node) => {\n\tconst items: ChildNode[] = [];\n\n\tel.childNodes.forEach((child) => {\n\t\tif (child.nodeName === '#text') items.push(child);\n\t\telse items.push(...collectTextNodes(child));\n\t});\n\n\treturn items;\n};\n\nexport { defaultSpeed, collectTextNodes };\n","import type { TypewriterOptions } from './types';\nimport { defaultSpeed, collectTextNodes } from './utils';\n\nconst map = (it: string, cb: (value: string, prev: HTMLSpanElement | undefined) => HTMLSpanElement | void | undefined) => {\n\tconst result: HTMLSpanElement[] = [];\n\n\tfor (const value of it) {\n\t\tconst val = cb(value, result.at(-1));\n\n\t\tif (val) {\n\t\t\tresult.push(val);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Typewriter\n */\nconst typewriter = ({ node, text, ended, speed = defaultSpeed }: TypewriterOptions) => {\n\t/**\n\t * Set content\n\t */\n\tnode.innerHTML = text;\n\n\tconst nodes = collectTextNodes(node).map((child) => {\n\t\tconst letters = map(child.textContent!, (char, prev) => {\n\t\t\t/**\n\t\t\t * First space will also be included, but will not rendered, because browser cuts spaces at the start and end\n\t\t\t */\n\t\t\tif (char === ' ' && prev) {\n\t\t\t\tprev.textContent += ' ';\n\t\t\t\treturn void 0;\n\t\t\t} else {\n\t\t\t\tconst text = document.createElement('span');\n\n\t\t\t\ttext.textContent = char;\n\n\t\t\t\t/**\n\t\t\t\t * The content is the same, but letter is invisible\n\t\t\t\t */\n\t\t\t\ttext.style.opacity = '0';\n\n\t\t\t\treturn text;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Replace `Text` with `HTMLParagraphElement`s\n\t\t */\n\t\tchild.replaceWith(...letters);\n\n\t\treturn letters;\n\t});\n\n\tlet current = 0;\n\tlet pos = 0;\n\n\tlet end = false;\n\n\tlet frame: number;\n\n\tconst enqueue = () => {\n\t\tframe = requestAnimationFrame(queue);\n\t};\n\n\tconst dequeue = () => {\n\t\tcancelAnimationFrame(frame);\n\t};\n\n\tlet timeout = 0;\n\tlet start = 0;\n\n\t/**\n\t * Node that is used to\n\t */\n\tlet container: Text;\n\n\tconst queue: FrameRequestCallback = (time) => {\n\t\tif (time >= start + timeout) {\n\t\t\tstart = time;\n\t\t\ttimeout = speed();\n\n\t\t\tprocess();\n\t\t} else if (end) {\n\t\t\tdequeue();\n\t\t} else {\n\t\t\tenqueue();\n\t\t}\n\t};\n\n\tconst process = () => {\n\t\tconst block = nodes[current];\n\n\t\tif (block?.length > pos) {\n\t\t\tconst span = block[pos];\n\t\t\tconst text = span.textContent!;\n\n\t\t\tif (pos++ === 0) {\n\t\t\t\tspan.replaceWith((container = document.createTextNode(text)));\n\t\t\t} else {\n\t\t\t\tcontainer.textContent += text;\n\t\t\t\tspan.remove();\n\t\t\t}\n\n\t\t\tenqueue();\n\t\t} else if (current++ < nodes.length) {\n\t\t\tpos = 0;\n\t\t\tenqueue();\n\t\t} else {\n\t\t\tend = true;\n\t\t\tdequeue();\n\t\t\tended && ended();\n\t\t}\n\t};\n\n\tprocess();\n\n\treturn {\n\t\t/**\n\t\t * End\n\t\t */\n\t\tend() {\n\t\t\tdequeue();\n\n\t\t\t/**\n\t\t\t * Should we really end\n\t\t\t */\n\t\t\tif (end) {\n\t\t\t\tnode.innerHTML = '';\n\t\t\t\treturn end;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Or just complete text immediately\n\t\t\t */\n\t\t\tnode.innerHTML = text;\n\t\t\tend = true;\n\n\t\t\treturn false;\n\t\t},\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy() {\n\t\t\tdequeue();\n\t\t\tnode.innerHTML = '';\n\t\t},\n\t};\n};\n\nexport { typewriter };\n"],"mappings":";AAAA,IAAM,eAAe,MAAM;AAC1B,SAAO,KAAK,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,EAAE;AAC7C;AAEA,IAAM,mBAAmB,CAAC,OAAuC;AAChE,QAAM,QAAqB,CAAC;AAE5B,KAAG,WAAW,QAAQ,CAAC,UAAU;AAChC,QAAI,MAAM,aAAa;AAAS,YAAM,KAAK,KAAK;AAAA;AAC3C,YAAM,KAAK,GAAG,iBAAiB,KAAK,CAAC;AAAA,EAC3C,CAAC;AAED,SAAO;AACR;;;ACVA,IAAM,MAAM,CAAC,IAAY,OAAiG;AACzH,QAAM,SAA4B,CAAC;AAEnC,aAAW,SAAS,IAAI;AACvB,UAAM,MAAM,GAAG,OAAO,OAAO,GAAG,EAAE,CAAC;AAEnC,QAAI,KAAK;AACR,aAAO,KAAK,GAAG;AAAA,IAChB;AAAA,EACD;AAEA,SAAO;AACR;AAKA,IAAM,aAAa,CAAC,EAAE,MAAM,MAAM,OAAO,QAAQ,aAAa,MAAyB;AAItF,OAAK,YAAY;AAEjB,QAAM,QAAQ,iBAAiB,IAAI,EAAE,IAAI,CAAC,UAAU;AACnD,UAAM,UAAU,IAAI,MAAM,aAAc,CAAC,MAAM,SAAS;AAIvD,UAAI,SAAS,OAAO,MAAM;AACzB,aAAK,eAAe;AACpB,eAAO;AAAA,MACR,OAAO;AACN,cAAMA,QAAO,SAAS,cAAc,MAAM;AAE1C,QAAAA,MAAK,cAAc;AAKnB,QAAAA,MAAK,MAAM,UAAU;AAErB,eAAOA;AAAA,MACR;AAAA,IACD,CAAC;AAKD,UAAM,YAAY,GAAG,OAAO;AAE5B,WAAO;AAAA,EACR,CAAC;AAED,MAAI,UAAU;AACd,MAAI,MAAM;AAEV,MAAI,MAAM;AAEV,MAAI;AAEJ,QAAM,UAAU,MAAM;AACrB,YAAQ,sBAAsB,KAAK;AAAA,EACpC;AAEA,QAAM,UAAU,MAAM;AACrB,yBAAqB,KAAK;AAAA,EAC3B;AAEA,MAAI,UAAU;AACd,MAAI,QAAQ;AAKZ,MAAI;AAEJ,QAAM,QAA8B,CAAC,SAAS;AAC7C,QAAI,QAAQ,QAAQ,SAAS;AAC5B,cAAQ;AACR,gBAAU,MAAM;AAEhB,cAAQ;AAAA,IACT,WAAW,KAAK;AACf,cAAQ;AAAA,IACT,OAAO;AACN,cAAQ;AAAA,IACT;AAAA,EACD;AAEA,QAAM,UAAU,MAAM;AACrB,UAAM,QAAQ,MAAM,OAAO;AAE3B,QAAI,OAAO,SAAS,KAAK;AACxB,YAAM,OAAO,MAAM,GAAG;AACtB,YAAMA,QAAO,KAAK;AAElB,UAAI,UAAU,GAAG;AAChB,aAAK,YAAa,YAAY,SAAS,eAAeA,KAAI,CAAE;AAAA,MAC7D,OAAO;AACN,kBAAU,eAAeA;AACzB,aAAK,OAAO;AAAA,MACb;AAEA,cAAQ;AAAA,IACT,WAAW,YAAY,MAAM,QAAQ;AACpC,YAAM;AACN,cAAQ;AAAA,IACT,OAAO;AACN,YAAM;AACN,cAAQ;AACR,eAAS,MAAM;AAAA,IAChB;AAAA,EACD;AAEA,UAAQ;AAER,SAAO;AAAA;AAAA;AAAA;AAAA,IAIN,MAAM;AACL,cAAQ;AAKR,UAAI,KAAK;AACR,aAAK,YAAY;AACjB,eAAO;AAAA,MACR;AAKA,WAAK,YAAY;AACjB,YAAM;AAEN,aAAO;AAAA,IACR;AAAA;AAAA;AAAA;AAAA,IAIA,UAAU;AACT,cAAQ;AACR,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AACD;","names":["text"]}