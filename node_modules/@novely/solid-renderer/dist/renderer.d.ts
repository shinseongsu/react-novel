import type { RendererInit, Context, Character, Lang } from '@novely/core';
import type { StateScreen, StateScreens, StateMainmenuItem, SolidRendererStore, CreateSolidRendererOptions, EmitterEventsMap } from './types';
declare const createSolidRenderer: ({ fullscreen, controls, skipTypewriterWhenGoingBack, target, settingsIcons, showAudioSettings }?: CreateSolidRendererOptions) => {
    emitter: import("./emitter").Emitter<EmitterEventsMap>;
    renderer<$Language extends Lang, $Characters extends Record<string, Character<$Language>>>(options: RendererInit<$Language, $Characters>): {
        getContext: (key: string) => Context;
        removeContext(name: string): void;
        ui: {
            showScreen(name: import("@novely/core").NovelyScreen): void;
            getScreen(): import("@novely/core").NovelyScreen;
            showLoading(): void;
            hideLoading(): void;
            showExitPrompt(): void;
            start: () => {
                unmount: () => void;
            };
        };
        misc: {
            preloadImage: <T extends string>(src: T) => T;
            preloadImageBlocking: (src: string) => Promise<void>;
            preloadAudioBlocking: (source: string) => Promise<void>;
        };
        actions: {
            showImage: (source: string, params?: {
                z?: number;
                in?: string;
                class?: string;
                style?: string;
                position?: string;
                await?: boolean;
            }) => import("@novely/core").ValidAction;
            hideImage: (source: string, params?: {
                out?: string;
                await?: boolean;
            }) => import("@novely/core").ValidAction;
        };
    };
    registerScreen(name: string, screen: StateScreen): void;
    registerMainmenuItem(fn: StateMainmenuItem): void;
};
export { createSolidRenderer };
export type { StateScreen, StateScreens, SolidRendererStore };
