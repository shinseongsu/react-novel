import type { Accessor, FlowComponent } from 'solid-js';
import type { Renderer, RendererInit, StorageData, Stored, BaseTranslationStrings, CoreData, Context } from '@novely/core';
import type { EmitterEventsMap, RendererStoreExtension } from '../types';
import type { Emitter } from '../emitter';
import type { DeepAtom, RendererStateStore } from '@novely/renderer-toolkit';
interface DataContext {
    $rendererState: DeepAtom<RendererStateStore<RendererStoreExtension>>;
    storageData: Accessor<StorageData>;
    storageDataUpdate: (fn: (prev: StorageData) => StorageData) => void;
    coreData: Accessor<CoreData>;
    coreDataUpdate: (fn: (prev: CoreData) => CoreData) => void;
    options: RendererInit<any, any>;
    renderer: Renderer;
    t: (key: BaseTranslationStrings | (string & Record<never, never>)) => string;
    emitter: Emitter<EmitterEventsMap>;
    media: {
        hyperWide: Accessor<boolean>;
    };
    getContext: (name: string) => Context;
    removeContext: (name: string) => void;
}
declare const Context: import("solid-js").Context<DataContext | undefined>;
interface ProviderProps {
    $rendererState: DeepAtom<RendererStateStore<RendererStoreExtension>>;
    storageData: Stored<StorageData>;
    coreData: Stored<CoreData>;
    options: RendererInit<any, any>;
    renderer: Renderer;
    emitter: Emitter<EmitterEventsMap>;
    getContext: (name: string) => Context;
    removeContext: (name: string) => void;
}
declare const Provider: FlowComponent<ProviderProps>;
declare const useData: () => DataContext;
export { Provider, useData };
