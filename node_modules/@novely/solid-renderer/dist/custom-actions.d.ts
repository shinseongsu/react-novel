import type { ValidAction, Character, Lang } from "@novely/core";
type ShowArbitraryCharacterParams<$Characters extends Record<string, Character<Lang>>, $Character extends keyof $Characters> = {
    id: $Character & string;
    emotion: keyof $Characters[$Character]['emotions'] & string;
    extendWith: () => string | string[];
    classes?: string;
    style?: string;
};
declare const createShowArbitraryCharacterAction: <$Characters extends Record<string, Character>>(_: $Characters) => <$Character extends keyof $Characters>(params: ShowArbitraryCharacterParams<$Characters, $Character>) => ValidAction;
type ShowImageParams = {
    z?: number;
    in?: string;
    class?: string;
    style?: string;
    position?: string;
    await?: boolean;
};
declare const showImage: (source: string, params?: ShowImageParams) => ValidAction;
type HideImageParams = {
    out?: string;
    await?: boolean;
};
declare const hideImage: (source: string, params?: HideImageParams) => ValidAction;
export { createShowArbitraryCharacterAction, showImage, hideImage };
