{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import { isArray, propertyIsOnObject, propertyIsUnsafe, isMergeableObject, keys } from './utils';\n\nconst empty = <T extends (Record<PropertyKey, unknown> | unknown[])>(value: T): T => {\n  return (isArray(value) ? [] : {}) as T;\n}\n\nconst clone = <T>(value: T): T => {\n  return isMergeableObject(value)\n    ? deepmerge(empty(value), value)\n    : value;\n}\n\nconst deepmerge = <T extends (Record<PropertyKey, unknown> | unknown[])>(target: T, source: T): T => {\n  if (isArray(target) && isArray(source)) {\n    const array = target.concat(source).map(element => clone(element));\n\n    return array as T;\n  } else if (!isArray(target) && !isArray(source)) {\n    const destination: Record<PropertyKey, any> = {};\n\n    for (const key of keys(target)) {\n      destination[key] = clone(target[key]);\n    }\n\n    for (const key of keys(source)) {\n      if (propertyIsUnsafe(target, key)) {\n        continue;\n      }\n\n      if (propertyIsOnObject(target, key) && isMergeableObject(source[key])) {\n        destination[key] = deepmerge(target[key] as any, source[key] as any);\n      } else {\n        destination[key] = clone(source[key]);\n      }\n    }\n\n    return destination as unknown as T;\n  } else {\n    return clone(source);\n  }\n}\n\nexport { deepmerge }\n","const { isArray } = Array;\nconst { hasOwnProperty, propertyIsEnumerable, getOwnPropertySymbols } = Object;\n\nconst propertyIsOnObject = <T extends Record<PropertyKey, unknown>, K extends PropertyKey>(object: T, property: K): object is T & { [Key in K]: unknown } => {\n\ttry {\n\t\treturn property in object\n\t} catch {\n\t\treturn false\n\t}\n}\n\nconst propertyIsUnsafe = (target: Record<PropertyKey, unknown>, key: PropertyKey) => {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nconst getEnumerableOwnPropertySymbols = (target: Record<PropertyKey, unknown>) => {\n  if (!getOwnPropertySymbols) return [];\n\n  return getOwnPropertySymbols(target).filter(symbol => propertyIsEnumerable.call(target, symbol))\n}\n\nconst keys = <T extends Record<PropertyKey, unknown>>(target: T): (keyof T)[] => {\n  return [...Object.keys(target), ...getEnumerableOwnPropertySymbols(target)];\n}\n\nconst isMergeableObject = (value: unknown): value is Record<PropertyKey, unknown> => {\n  return !!value && typeof value === 'object' && !(['RegExp', 'Date'].includes(Object.prototype.toString.call(value).slice(8, -1)));\n}\n\nexport { isArray, propertyIsOnObject, propertyIsUnsafe, getEnumerableOwnPropertySymbols, isMergeableObject, keys }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,MAAM,EAAE,QAAQ,IAAI;AACpB,MAAM,EAAE,gBAAgB,sBAAsB,sBAAsB,IAAI;AAExE,MAAM,qBAAqB,CAAgE,QAAW,aAAuD;AAC5J,QAAI;AACH,aAAO,YAAY;AAAA,IACpB,QAAQ;AACP,aAAO;AAAA,IACR;AAAA,EACD;AAEA,MAAM,mBAAmB,CAAC,QAAsC,QAAqB;AACpF,WAAO,mBAAmB,QAAQ,GAAG,KACjC,EAAE,eAAe,KAAK,QAAQ,GAAG,KAChC,qBAAqB,KAAK,QAAQ,GAAG;AAAA,EAC3C;AAEA,MAAM,kCAAkC,CAAC,WAAyC;AAChF,QAAI,CAAC;AAAuB,aAAO,CAAC;AAEpC,WAAO,sBAAsB,MAAM,EAAE,OAAO,YAAU,qBAAqB,KAAK,QAAQ,MAAM,CAAC;AAAA,EACjG;AAEA,MAAM,OAAO,CAAyC,WAA2B;AAC/E,WAAO,CAAC,GAAG,OAAO,KAAK,MAAM,GAAG,GAAG,gCAAgC,MAAM,CAAC;AAAA,EAC5E;AAEA,MAAM,oBAAoB,CAAC,UAA0D;AACnF,WAAO,CAAC,CAAC,SAAS,OAAO,UAAU,YAAY,CAAE,CAAC,UAAU,MAAM,EAAE,SAAS,OAAO,UAAU,SAAS,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,EACjI;;;AD3BA,MAAM,QAAQ,CAAuD,UAAgB;AACnF,WAAQ,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC;AAAA,EACjC;AAEA,MAAM,QAAQ,CAAI,UAAgB;AAChC,WAAO,kBAAkB,KAAK,IAC1B,UAAU,MAAM,KAAK,GAAG,KAAK,IAC7B;AAAA,EACN;AAEA,MAAM,YAAY,CAAuD,QAAW,WAAiB;AACnG,QAAI,QAAQ,MAAM,KAAK,QAAQ,MAAM,GAAG;AACtC,YAAM,QAAQ,OAAO,OAAO,MAAM,EAAE,IAAI,aAAW,MAAM,OAAO,CAAC;AAEjE,aAAO;AAAA,IACT,WAAW,CAAC,QAAQ,MAAM,KAAK,CAAC,QAAQ,MAAM,GAAG;AAC/C,YAAM,cAAwC,CAAC;AAE/C,iBAAW,OAAO,KAAK,MAAM,GAAG;AAC9B,oBAAY,GAAG,IAAI,MAAM,OAAO,GAAG,CAAC;AAAA,MACtC;AAEA,iBAAW,OAAO,KAAK,MAAM,GAAG;AAC9B,YAAI,iBAAiB,QAAQ,GAAG,GAAG;AACjC;AAAA,QACF;AAEA,YAAI,mBAAmB,QAAQ,GAAG,KAAK,kBAAkB,OAAO,GAAG,CAAC,GAAG;AACrE,sBAAY,GAAG,IAAI,UAAU,OAAO,GAAG,GAAU,OAAO,GAAG,CAAQ;AAAA,QACrE,OAAO;AACL,sBAAY,GAAG,IAAI,MAAM,OAAO,GAAG,CAAC;AAAA,QACtC;AAAA,MACF;AAEA,aAAO;AAAA,IACT,OAAO;AACL,aAAO,MAAM,MAAM;AAAA,IACrB;AAAA,EACF;","names":[]}