type ExtendAudioGraphOptions = {
    context: AudioContext;
    node: GainNode;
};
type AudioNodeLike = {
    connect: ((destinationNode: AudioNode) => void);
};
type ExtendAudioGraph = (options: ExtendAudioGraphOptions) => AudioNode | AudioNodeLike;
type AudioOptions = {
    /**
     * Source
     */
    src: string;
    /**
     * Loop
     * @default false
     */
    loop?: boolean;
    /**
     * Volume
     * @default 1
     */
    volume?: number;
    /**
     * Will pause playing on blur event, play on focus.
     * @default false
     */
    pauseOnBlur?: boolean;
    /**
     * @default false
     */
    autoplay?: boolean;
    /**
     * Function to extend audio "graph"
     */
    extendAudioGraph?: ExtendAudioGraph;
};
declare const createAudio: (options: AudioOptions) => {
    play(): Promise<void>;
    pause(): Promise<void>;
    reset(): Promise<void>;
    stop(): Promise<void>;
    destroy(): Promise<void>;
    fetch(): Promise<void>;
    readonly playing: boolean;
    readonly destroyed: boolean;
    volume: number;
    loop: boolean;
};
declare const prefetchAudio: (src: string) => Promise<ArrayBuffer>;

declare const waitForInteraction: () => Promise<void>;

export { type AudioOptions, createAudio, prefetchAudio, waitForInteraction };
